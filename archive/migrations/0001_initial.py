# Generated by Django 5.0.14 on 2025-06-07 08:42

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("filemanager", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="RetentionPolicy",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
                ("description", models.TextField(blank=True)),
                ("retention_period", models.IntegerField(help_text="Период хранения")),
                (
                    "period_type",
                    models.CharField(
                        choices=[
                            ("days", "Дни"),
                            ("months", "Месяцы"),
                            ("years", "Годы"),
                            ("permanent", "Постоянно"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "auto_delete",
                    models.BooleanField(
                        default=False,
                        help_text="Автоматическое удаление по истечении срока",
                    ),
                ),
                (
                    "notification_days",
                    models.IntegerField(
                        default=30,
                        help_text="За сколько дней уведомлять о истечении срока",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Политика хранения",
                "verbose_name_plural": "Политики хранения",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="ArchiveCategory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("description", models.TextField(blank=True)),
                (
                    "auto_rules",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="JSON правила для автоматической категоризации",
                    ),
                ),
                (
                    "metadata_schema",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="JSON схема для метаданных документов",
                    ),
                ),
                (
                    "default_access_level",
                    models.CharField(
                        choices=[
                            ("public", "Публичный"),
                            ("internal", "Внутренний"),
                            ("confidential", "Конфиденциальный"),
                            ("restricted", "Ограниченный"),
                        ],
                        default="internal",
                        max_length=20,
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                (
                    "requires_approval",
                    models.BooleanField(
                        default=False, help_text="Требует одобрения для архивирования"
                    ),
                ),
                (
                    "auto_categorize",
                    models.BooleanField(
                        default=True, help_text="Включить автокатегоризацию"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="created_categories",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "parent",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="subcategories",
                        to="archive.archivecategory",
                    ),
                ),
                (
                    "retention_policy",
                    models.ForeignKey(
                        help_text="Политика хранения документов в этой категории",
                        on_delete=django.db.models.deletion.PROTECT,
                        to="archive.retentionpolicy",
                    ),
                ),
            ],
            options={
                "verbose_name": "Категория архива",
                "verbose_name_plural": "Категории архива",
                "ordering": ["parent__name", "name"],
            },
        ),
        migrations.CreateModel(
            name="ArchivedDocument",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("archived_at", models.DateTimeField(auto_now_add=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Ожидает архивирования"),
                            ("processing", "Обрабатывается"),
                            ("archived", "Архивирован"),
                            ("expired", "Срок хранения истек"),
                            ("scheduled_deletion", "Запланировано удаление"),
                            ("deleted", "Удален"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                (
                    "access_level",
                    models.CharField(
                        choices=[
                            ("public", "Публичный"),
                            ("internal", "Внутренний"),
                            ("confidential", "Конфиденциальный"),
                            ("restricted", "Ограниченный"),
                        ],
                        default="internal",
                        max_length=20,
                    ),
                ),
                ("metadata", models.JSONField(blank=True, default=dict)),
                (
                    "ai_analysis",
                    models.JSONField(
                        blank=True, default=dict, help_text="Результаты ИИ анализа"
                    ),
                ),
                ("tags", models.JSONField(blank=True, default=list)),
                ("retention_date", models.DateTimeField(blank=True, null=True)),
                ("last_accessed", models.DateTimeField(blank=True, null=True)),
                ("access_count", models.IntegerField(default=0)),
                ("version", models.IntegerField(default=1)),
                (
                    "checksum",
                    models.CharField(help_text="SHA-256 checksum", max_length=64),
                ),
                (
                    "archive_note",
                    models.TextField(blank=True, help_text="Заметка при архивировании"),
                ),
                (
                    "admin_notes",
                    models.TextField(blank=True, help_text="Административные заметки"),
                ),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "archived_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="archived_documents",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "category",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="documents",
                        to="archive.archivecategory",
                    ),
                ),
                (
                    "original_file",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="archive_record",
                        to="filemanager.fileitem",
                    ),
                ),
            ],
            options={
                "verbose_name": "Архивированный документ",
                "verbose_name_plural": "Архивированные документы",
                "ordering": ["-archived_at"],
            },
        ),
        migrations.CreateModel(
            name="ArchiveActivity",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "activity_type",
                    models.CharField(
                        choices=[
                            ("archived", "Архивирован"),
                            ("viewed", "Просмотрен"),
                            ("downloaded", "Скачан"),
                            ("restored", "Восстановлен"),
                            ("category_changed", "Изменена категория"),
                            ("metadata_updated", "Обновлены метаданные"),
                            ("permission_granted", "Предоставлены права"),
                            ("permission_revoked", "Отозваны права"),
                            ("expired", "Истек срок хранения"),
                            ("deleted", "Удален"),
                        ],
                        max_length=30,
                    ),
                ),
                ("description", models.TextField(blank=True)),
                ("metadata", models.JSONField(blank=True, default=dict)),
                ("ip_address", models.GenericIPAddressField(blank=True, null=True)),
                ("user_agent", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "document",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="activities",
                        to="archive.archiveddocument",
                    ),
                ),
            ],
            options={
                "verbose_name": "Активность в архиве",
                "verbose_name_plural": "Активность в архиве",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="AIAnalysisResult",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "analysis_type",
                    models.CharField(
                        choices=[
                            ("content_classification", "Классификация контента"),
                            ("sentiment_analysis", "Анализ тональности"),
                            ("entity_extraction", "Извлечение сущностей"),
                            ("topic_modeling", "Моделирование тем"),
                            ("similarity_analysis", "Анализ похожести"),
                            ("compliance_check", "Проверка соответствия"),
                            ("quality_assessment", "Оценка качества"),
                        ],
                        max_length=30,
                    ),
                ),
                (
                    "ai_model",
                    models.CharField(
                        help_text="Используемая модель ИИ", max_length=100
                    ),
                ),
                (
                    "results",
                    models.JSONField(help_text="Структурированные результаты анализа"),
                ),
                (
                    "confidence_score",
                    models.FloatField(help_text="Уровень уверенности (0-1)"),
                ),
                ("extracted_entities", models.JSONField(blank=True, default=list)),
                ("classifications", models.JSONField(blank=True, default=list)),
                (
                    "summary",
                    models.TextField(
                        blank=True, help_text="Краткое описание результатов"
                    ),
                ),
                ("recommendations", models.JSONField(blank=True, default=list)),
                ("suggested_tags", models.JSONField(blank=True, default=list)),
                (
                    "processing_time",
                    models.FloatField(help_text="Время обработки в секундах"),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "suggested_category",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="ai_suggested_documents",
                        to="archive.archivecategory",
                    ),
                ),
                (
                    "document",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="ai_analyses",
                        to="archive.archiveddocument",
                    ),
                ),
            ],
            options={
                "verbose_name": "Результат ИИ анализа",
                "verbose_name_plural": "Результаты ИИ анализа",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="ArchivePermission",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "permission_type",
                    models.CharField(
                        choices=[
                            ("view", "Просмотр"),
                            ("download", "Скачивание"),
                            ("restore", "Восстановление"),
                            ("delete", "Удаление"),
                            ("admin", "Администрирование"),
                        ],
                        max_length=20,
                    ),
                ),
                ("granted_at", models.DateTimeField(auto_now_add=True)),
                ("expires_at", models.DateTimeField(blank=True, null=True)),
                (
                    "document",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="permissions",
                        to="archive.archiveddocument",
                    ),
                ),
                (
                    "granted_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="granted_archive_permissions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Права доступа к архиву",
                "verbose_name_plural": "Права доступа к архиву",
            },
        ),
        migrations.CreateModel(
            name="AutoArchivingRule",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
                ("description", models.TextField(blank=True)),
                (
                    "trigger_type",
                    models.CharField(
                        choices=[
                            ("time_based", "По времени"),
                            ("size_based", "По размеру"),
                            ("pattern_based", "По шаблону"),
                            ("ai_classification", "По ИИ классификации"),
                            ("user_activity", "По активности пользователя"),
                            ("storage_threshold", "По заполнению хранилища"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "trigger_conditions",
                    models.JSONField(
                        help_text="JSON конфигурация условий срабатывания"
                    ),
                ),
                (
                    "file_patterns",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="Шаблоны имен файлов для обработки",
                    ),
                ),
                (
                    "exclude_patterns",
                    models.JSONField(
                        blank=True, default=list, help_text="Шаблоны исключений"
                    ),
                ),
                ("require_ai_analysis", models.BooleanField(default=True)),
                ("auto_approve", models.BooleanField(default=False)),
                ("preserve_original", models.BooleanField(default=True)),
                ("schedule_enabled", models.BooleanField(default=True)),
                (
                    "schedule_cron",
                    models.CharField(
                        blank=True,
                        help_text="Cron выражение для расписания",
                        max_length=100,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("active", "Активно"),
                            ("paused", "Приостановлено"),
                            ("disabled", "Отключено"),
                        ],
                        default="active",
                        max_length=20,
                    ),
                ),
                ("last_run", models.DateTimeField(blank=True, null=True)),
                ("next_run", models.DateTimeField(blank=True, null=True)),
                ("success_count", models.IntegerField(default=0)),
                ("error_count", models.IntegerField(default=0)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "target_category",
                    models.ForeignKey(
                        help_text="Целевая категория для архивирования",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="archive.archivecategory",
                    ),
                ),
            ],
            options={
                "verbose_name": "Правило автоархивирования",
                "verbose_name_plural": "Правила автоархивирования",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="ArchivingJob",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "job_type",
                    models.CharField(
                        choices=[
                            ("manual", "Ручное"),
                            ("scheduled", "По расписанию"),
                            ("auto_rule", "Автоправило"),
                            ("bulk_import", "Массовый импорт"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Ожидает"),
                            ("running", "Выполняется"),
                            ("completed", "Завершено"),
                            ("failed", "Ошибка"),
                            ("cancelled", "Отменено"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                (
                    "source_paths",
                    models.JSONField(help_text="Пути к обрабатываемым файлам"),
                ),
                ("configuration", models.JSONField(blank=True, default=dict)),
                ("total_files", models.IntegerField(default=0)),
                ("processed_files", models.IntegerField(default=0)),
                ("successful_files", models.IntegerField(default=0)),
                ("failed_files", models.IntegerField(default=0)),
                ("results", models.JSONField(blank=True, default=dict)),
                ("error_log", models.JSONField(blank=True, default=list)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("started_at", models.DateTimeField(blank=True, null=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "target_category",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="archive.archivecategory",
                    ),
                ),
                (
                    "auto_rule",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="jobs",
                        to="archive.autoarchivingrule",
                    ),
                ),
            ],
            options={
                "verbose_name": "Задание архивирования",
                "verbose_name_plural": "Задания архивирования",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="ComplianceRule",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                (
                    "rule_type",
                    models.CharField(
                        choices=[
                            ("gdpr", "GDPR"),
                            ("sox", "SOX"),
                            ("hipaa", "HIPAA"),
                            ("custom", "Пользовательское"),
                        ],
                        max_length=20,
                    ),
                ),
                ("description", models.TextField()),
                (
                    "required_retention_period",
                    models.IntegerField(blank=True, null=True),
                ),
                ("max_retention_period", models.IntegerField(blank=True, null=True)),
                ("requires_encryption", models.BooleanField(default=False)),
                ("requires_audit_log", models.BooleanField(default=True)),
                ("auto_delete_required", models.BooleanField(default=False)),
                ("regulation_reference", models.CharField(blank=True, max_length=200)),
                ("effective_date", models.DateField()),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "categories",
                    models.ManyToManyField(
                        related_name="compliance_rules", to="archive.archivecategory"
                    ),
                ),
            ],
            options={
                "verbose_name": "Правило соответствия",
                "verbose_name_plural": "Правила соответствия",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="DocumentEmbedding",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "content_embedding",
                    models.JSONField(
                        help_text="Векторное представление содержимого документа"
                    ),
                ),
                (
                    "metadata_embedding",
                    models.JSONField(
                        blank=True,
                        help_text="Векторное представление метаданных",
                        null=True,
                    ),
                ),
                (
                    "embedding_model",
                    models.CharField(
                        default="sentence-transformers/all-MiniLM-L6-v2", max_length=100
                    ),
                ),
                ("embedding_version", models.CharField(default="1.0", max_length=20)),
                ("keywords", models.JSONField(blank=True, default=list)),
                ("topics", models.JSONField(blank=True, default=list)),
                ("similarity_score", models.FloatField(blank=True, null=True)),
                ("related_documents", models.JSONField(blank=True, default=list)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "document",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="embedding",
                        to="archive.archiveddocument",
                    ),
                ),
            ],
            options={
                "verbose_name": "Векторное представление документа",
                "verbose_name_plural": "Векторные представления документов",
            },
        ),
        migrations.CreateModel(
            name="ArchiveAnalytics",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "metric_type",
                    models.CharField(
                        choices=[
                            ("storage_usage", "Использование хранилища"),
                            ("archive_rate", "Скорость архивирования"),
                            ("access_frequency", "Частота доступа"),
                            ("category_distribution", "Распределение по категориям"),
                            ("retention_compliance", "Соблюдение сроков хранения"),
                            ("ai_accuracy", "Точность ИИ"),
                            ("user_activity", "Активность пользователей"),
                        ],
                        max_length=30,
                    ),
                ),
                ("metric_date", models.DateField()),
                (
                    "metric_data",
                    models.JSONField(help_text="Структурированные данные метрики"),
                ),
                ("total_count", models.IntegerField(default=0)),
                ("total_size", models.BigIntegerField(default=0)),
                ("average_value", models.FloatField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "category",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="archive.archivecategory",
                    ),
                ),
            ],
            options={
                "verbose_name": "Аналитика архива",
                "verbose_name_plural": "Аналитика архива",
                "ordering": ["-metric_date", "metric_type"],
                "indexes": [
                    models.Index(
                        fields=["metric_type", "metric_date"],
                        name="archive_arc_metric__ac8382_idx",
                    ),
                    models.Index(
                        fields=["category", "metric_date"],
                        name="archive_arc_categor_3f43fd_idx",
                    ),
                ],
                "unique_together": {("metric_type", "metric_date", "category")},
            },
        ),
        migrations.AddIndex(
            model_name="archiveddocument",
            index=models.Index(
                fields=["category", "status"], name="archive_arc_categor_6d54ba_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="archiveddocument",
            index=models.Index(
                fields=["archived_by", "archived_at"],
                name="archive_arc_archive_280c10_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="archiveddocument",
            index=models.Index(
                fields=["status", "retention_date"],
                name="archive_arc_status_f2ef2c_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="archiveddocument",
            index=models.Index(
                fields=["access_level"], name="archive_arc_access__70f3a0_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="archiveddocument",
            index=models.Index(
                fields=["checksum"], name="archive_arc_checksu_0aff19_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="archiveactivity",
            index=models.Index(
                fields=["document", "activity_type"],
                name="archive_arc_documen_11fada_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="archiveactivity",
            index=models.Index(
                fields=["user", "created_at"], name="archive_arc_user_id_2ab914_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="archiveactivity",
            index=models.Index(
                fields=["created_at"], name="archive_arc_created_da6615_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="aianalysisresult",
            index=models.Index(
                fields=["document", "analysis_type"],
                name="archive_aia_documen_9e8f77_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="aianalysisresult",
            index=models.Index(
                fields=["ai_model", "created_at"], name="archive_aia_ai_mode_85fa1f_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="aianalysisresult",
            index=models.Index(
                fields=["confidence_score"], name="archive_aia_confide_8d01dd_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="archivepermission",
            unique_together={("document", "user", "permission_type")},
        ),
        migrations.AddIndex(
            model_name="autoarchivingrule",
            index=models.Index(
                fields=["status", "schedule_enabled"],
                name="archive_aut_status_65e9cc_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="autoarchivingrule",
            index=models.Index(
                fields=["trigger_type"], name="archive_aut_trigger_c6d08e_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="autoarchivingrule",
            index=models.Index(
                fields=["next_run"], name="archive_aut_next_ru_996dd1_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="archivingjob",
            index=models.Index(
                fields=["status", "job_type"], name="archive_arc_status_241607_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="archivingjob",
            index=models.Index(
                fields=["created_by", "created_at"],
                name="archive_arc_created_9f8234_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="archivingjob",
            index=models.Index(
                fields=["auto_rule", "status"], name="archive_arc_auto_ru_63c31f_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="documentembedding",
            index=models.Index(
                fields=["embedding_model", "embedding_version"],
                name="archive_doc_embeddi_6fb830_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="documentembedding",
            index=models.Index(
                fields=["created_at"], name="archive_doc_created_d6cc06_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="archivecategory",
            index=models.Index(
                fields=["parent", "is_active"], name="archive_arc_parent__80f41d_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="archivecategory",
            index=models.Index(fields=["name"], name="archive_arc_name_41e783_idx"),
        ),
    ]
