export type CodeChanMood = 'happy' | 'thinking' | 'surprised' | 'error' | 'sleeping' | 'coding' | 'explaining' | 'working' | 'sad';

export interface CodeChanState {
    mood: CodeChanMood;
    message?: string;
    isWaving: boolean;
    isCoding: boolean;
    isExplaining: boolean;
}

export const defaultCodeChanState: CodeChanState = {
    mood: 'happy',
    isWaving: false,
    isCoding: false,
    isExplaining: false
};

export interface CodeChanAnimation {
    initial?: any;
    animate?: any;
    transition?: any;
}

export const codeChanAnimations: Record<CodeChanMood, CodeChanAnimation> = {
    happy: {
        initial: { y: 0 },
        animate: { y: [-5, 5] },
        transition: {
            duration: 2,
            repeat: Infinity,
            repeatType: "reverse" as const,
            ease: "easeInOut"
        }
    },
    thinking: {
        initial: { rotate: 0 },
        animate: { rotate: [-5, 5] },
        transition: {
            duration: 3,
            repeat: Infinity,
            repeatType: "reverse" as const,
            ease: "easeInOut"
        }
    },
    surprised: {
        initial: { scale: 1 },
        animate: { scale: [1, 1.2, 1] },
        transition: {
            duration: 0.5,
            times: [0, 0.5, 1]
        }
    },
    error: {
        initial: { x: 0 },
        animate: { x: [-5, 5, -5, 5, 0] },
        transition: {
            duration: 0.5,
            times: [0, 0.25, 0.5, 0.75, 1]
        }
    },
    sleeping: {
        initial: { y: 0 },
        animate: { y: [0, 2] },
        transition: {
            duration: 2,
            repeat: Infinity,
            repeatType: "reverse" as const,
            ease: "easeInOut"
        }
    },
    coding: {
        initial: { x: 0 },
        animate: { x: [-2, 2] },
        transition: {
            duration: 0.2,
            repeat: Infinity,
            repeatType: "reverse" as const
        }
    },
    explaining: {
        initial: { scale: 1 },
        animate: { scale: [1, 1.05] },
        transition: {
            duration: 1,
            repeat: Infinity,
            repeatType: "reverse" as const,
            ease: "easeInOut"
        }
    },
    working: {
        initial: { rotate: 0 },
        animate: { rotate: [0, 5, -5, 0] },
        transition: {
            duration: 1,
            repeat: Infinity,
            ease: "easeInOut"
        }
    },
    sad: {
        initial: { y: 0 },
        animate: { y: [0, 2] },
        transition: {
            duration: 1.5,
            repeat: Infinity,
            repeatType: "reverse" as const,
            ease: "easeInOut"
        }
    }
};

export const getRandomEncouragement = (): string => {
    const encouragements = [
        "–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! Ÿ©(‚óï‚Äø‚óïÔΩ°)€∂",
        "–î–∞–≤–∞–π —Å–¥–µ–ª–∞–µ–º —ç—Ç–æ –≤–º–µ—Å—Ç–µ! (Ôæâ‚óï„ÉÆ‚óï)Ôæâ*:ÔΩ•Ôæü‚úß",
        "–£ —Ç–µ–±—è –ø–æ–ª—É—á–∞–µ—Ç—Å—è! (‚ó†‚Äø‚ó†‚úø)",
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è! ‚≠êÔ∏è",
        "–≠—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è –∑–∞–¥–∞—á–∞! (‡πëÀÉ·¥óÀÇ)Ôª≠",
        "–¢—ã –Ω–∞ –≤–µ—Ä–Ω–æ–º –ø—É—Ç–∏! ‚ô™(‡πë·¥ñ‚ó°·¥ñ‡πë)‚ô™",
        "–ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! (ÔΩÄ„Éªœâ„Éª¬¥)",
    ];
    return encouragements[Math.floor(Math.random() * encouragements.length)];
};

export const getRandomTip = (): string => {
    const tips = [
        "–ù–µ –∑–∞–±—É–¥—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è! üíæ",
        "–ü—Ä–æ–≤–µ—Ä—å —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –ø–µ—Ä–µ–¥ –∫–æ–º–º–∏—Ç–æ–º! üîç",
        "–ú–æ–∂–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –∫–æ–¥—É? üìù",
        "–ù–µ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å –∫–æ–º–º–∏—Ç? üåü",
        "–Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Å –∞–Ω–∞–ª–∏–∑–æ–º —Ñ–∞–π–ª–æ–≤! ü§ñ",
        "–î–∞–≤–∞–π –ø—Ä–æ–≤–µ—Ä–∏–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å? üöÄ",
        "–ú–æ–∂–µ—Ç –±—ã—Ç—å, —Å—Ç–æ–∏—Ç –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç—ã? ‚ú®",
    ];
    return tips[Math.floor(Math.random() * tips.length)];
};
