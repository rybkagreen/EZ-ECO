import React, { useState, useEffect } from 'react';
import './AIIntegrationDemo.css';
import { 
  Brain, 
  Zap, 
  TrendingUp, 
  BarChart3, 
  FileText, 
  MessageSquare,
  Sparkles,
  CheckCircle,
  Clock,
  Target,
  Search,
  Settings,
  Download,
  Share2
} from 'lucide-react';
import ModernButton from '../ModernButton';
import './AIIntegrationDemo.css';

interface DemoStep {
  id: string;
  title: string;
  description: string;
  icon: React.ReactNode;
  duration: number;
  status: 'pending' | 'running' | 'completed';
}

export interface AIIntegrationDemoProps {
  onClose: () => void;
}

const AIIntegrationDemo: React.FC<AIIntegrationDemoProps> = ({ onClose }) => {
  const [currentStep, setCurrentStep] = useState(0);
  const [isRunning, setIsRunning] = useState(false);
  const [progress, setProgress] = useState(0);

  const demoSteps: DemoStep[] = [
    {
      id: 'upload',
      title: '–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞',
      description: '–ò–ò –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏ –≥–æ—Ç–æ–≤–∏—Ç—Å—è –∫ –∞–Ω–∞–ª–∏–∑—É',
      icon: <FileText size={20} />,
      duration: 1000,
      status: 'pending'
    },
    {
      id: 'analyze',
      title: '–°—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑',
      description: '–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞, –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ',
      icon: <Search size={20} />,
      duration: 1500,
      status: 'pending'
    },
    {
      id: 'ai-process',
      title: '–ò–ò –æ–±—Ä–∞–±–æ—Ç–∫–∞',
      description: '–ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å –ø–æ–º–æ—â—å—é —è–∑—ã–∫–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π',
      icon: <Brain size={20} />,
      duration: 2000,
      status: 'pending'
    },
    {
      id: 'insights',
      title: '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω—Å–∞–π—Ç–æ–≤',
      description: '–°–æ–∑–¥–∞–Ω–∏–µ —É–º–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∏ –≤—ã—è–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤',
      icon: <Sparkles size={20} />,
      duration: 1200,
      status: 'pending'
    },
    {
      id: 'visualization',
      title: '–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö',
      description: '–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤, —á–∞—Ä—Ç–æ–≤ –∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤',
      icon: <BarChart3 size={20} />,
      duration: 800,
      status: 'pending'
    },
    {
      id: 'chat-ready',
      title: '–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –¥–∏–∞–ª–æ–≥—É',
      description: '–ê–∫—Ç–∏–≤–∞—Ü–∏—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —á–∞—Ç–∞ –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ',
      icon: <MessageSquare size={20} />,
      duration: 600,
      status: 'pending'
    }
  ];

  const [steps, setSteps] = useState(demoSteps);

  const startDemo = async () => {
    setIsRunning(true);
    setProgress(0);

    for (let i = 0; i < steps.length; i++) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞
      setSteps(prev => prev.map((step, index) => ({
        ...step,
        status: index === i ? 'running' : index < i ? 'completed' : 'pending'
      })));
      
      setCurrentStep(i);

      // –°–∏–º—É–ª—è—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —à–∞–≥–∞
      await new Promise(resolve => setTimeout(resolve, steps[i].duration));

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
      setProgress(((i + 1) / steps.length) * 100);
    }

    // –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—Å–µ —à–∞–≥–∏
    setSteps(prev => prev.map(step => ({ ...step, status: 'completed' })));
    setIsRunning(false);
  };

  const resetDemo = () => {
    setSteps(demoSteps);
    setCurrentStep(0);
    setProgress(0);
    setIsRunning(false);
  };

  return (
    <div className="ai-integration-demo">
      <div className="demo-header">
        <div className="demo-title">
          <Brain className="demo-icon" />
          <h2>–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ò–ò –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏</h2>
        </div>
        <div className="demo-actions">
          <ModernButton type="outline" size="small" onClick={onClose}>
            –ó–∞–∫—Ä—ã—Ç—å
          </ModernButton>
        </div>
      </div>

      <div className="demo-content">
        <div className="demo-description">
          <h3>üöÄ –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –ò–ò –∞–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤</h3>
          <p>
            –ù–∞—à–∞ —Å–∏—Å—Ç–µ–º–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–µ—Ä–µ–¥–æ–≤—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è 
            –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –æ—Ñ–∏—Å–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤. –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ, –∫–∞–∫ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç 
            –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –¥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —É–º–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.
          </p>
        </div>

        <div className="demo-progress">
          <div className="progress-header">
            <span>–ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏</span>
            <span>{Math.round(progress)}%</span>
          </div>
          <div className="progress-bar">
            <div 
              className="progress-fill" 
              style={{ width: `${progress}%` }}
            />
          </div>
        </div>

        <div className="demo-steps">
          {steps.map((step, index) => (
            <div 
              key={step.id} 
              className={`demo-step ${step.status} ${currentStep === index ? 'current' : ''}`}
            >
              <div className="step-icon">
                {step.status === 'completed' ? (
                  <CheckCircle size={20} />
                ) : step.status === 'running' ? (
                  <div className="spinner" />
                ) : (
                  step.icon
                )}
              </div>
              <div className="step-content">
                <h4>{step.title}</h4>
                <p>{step.description}</p>
              </div>
              <div className="step-status">
                {step.status === 'running' && (
                  <Clock className="status-icon running" />
                )}
                {step.status === 'completed' && (
                  <CheckCircle className="status-icon completed" />
                )}
              </div>
            </div>
          ))}
        </div>

        <div className="demo-controls">
          {!isRunning ? (
            <ModernButton 
              type="primary" 
              size="large"
              onClick={startDemo}
              disabled={progress === 100}
            >
              <Zap size={16} />
              {progress === 100 ? '–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞' : '–ù–∞—á–∞—Ç—å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é'}
            </ModernButton>
          ) : (
            <ModernButton type="outline" size="large" disabled>
              <div className="spinner" />
              –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–Ω–∞–ª–∏–∑...
            </ModernButton>
          )}
          
          {progress > 0 && (
            <ModernButton 
              type="outline" 
              size="large"
              onClick={resetDemo}
              disabled={isRunning}
            >
              –°–±—Ä–æ—Å–∏—Ç—å –¥–µ–º–æ
            </ModernButton>
          )}
        </div>

        {progress === 100 && (
          <div className="demo-results">
            <div className="results-header">
              <Target className="results-icon" />
              <h3>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞</h3>
            </div>
            <div className="results-grid">
              <div className="result-card">
                <div className="result-metric">
                  <span className="metric-value">87%</span>
                  <span className="metric-label">–ö–∞—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞</span>
                </div>
              </div>
              <div className="result-card">
                <div className="result-metric">
                  <span className="metric-value">12</span>
                  <span className="metric-label">–ö–ª—é—á–µ–≤—ã—Ö –∏–Ω—Å–∞–π—Ç–æ–≤</span>
                </div>
              </div>
              <div className="result-card">
                <div className="result-metric">
                  <span className="metric-value">3</span>
                  <span className="metric-label">–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ò–ò</span>
                </div>
              </div>
              <div className="result-card">
                <div className="result-metric">
                  <span className="metric-value">Ready</span>
                  <span className="metric-label">–°—Ç–∞—Ç—É—Å —á–∞—Ç–∞</span>
                </div>
              </div>
            </div>
            
            <div className="demo-features">
              <h4>‚ú® –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</h4>
              <div className="features-list">
                <div className="feature-item">
                  <MessageSquare className="feature-icon" />
                  <span>–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π —á–∞—Ç —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º</span>
                </div>
                <div className="feature-item">
                  <BarChart3 className="feature-icon" />
                  <span>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤</span>
                </div>
                <div className="feature-item">
                  <TrendingUp className="feature-icon" />
                  <span>–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ –∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ</span>
                </div>
                <div className="feature-item">
                  <Sparkles className="feature-icon" />
                  <span>–£–ª—É—á—à–µ–Ω–∏–µ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞</span>
                </div>
              </div>
            </div>

            <div className="demo-actions-final">
              <ModernButton type="primary" size="medium">
                <Download size={16} />
                –°–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç
              </ModernButton>
              <ModernButton type="outline" size="medium">
                <Share2 size={16} />
                –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
              </ModernButton>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default AIIntegrationDemo;
