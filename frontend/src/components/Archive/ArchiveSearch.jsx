import React, { useState, useEffect, useCallback } from 'react';
import { archiveAPI } from '../../services/archiveAPI';
import { debounce } from '../../utils/debounce';

const ArchiveSearch = () => {
  const [searchQuery, setSearchQuery] = useState('');
  const [searchResults, setSearchResults] = useState([]);
  const [isSearching, setIsSearching] = useState(false);
  const [searchFilters, setSearchFilters] = useState({
    category: '',
    dateFrom: '',
    dateTo: '',
    accessLevel: '',
    fileType: ''
  });
  const [categories, setCategories] = useState([]);
  const [searchMode, setSearchMode] = useState('semantic'); // semantic, simple, advanced

  useEffect(() => {
    loadCategories();
  }, []);

  const loadCategories = async () => {
    try {
      const categoriesData = await archiveAPI.getCategories();
      setCategories(categoriesData);
    } catch (error) {
      console.error('Failed to load categories:', error);
    }
  };

  // –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ —Å –¥–µ–±–∞—É–Ω—Å–æ–º
  const debouncedSemanticSearch = useCallback(
    debounce(async (query) => {
      if (query.trim().length < 3) {
        setSearchResults([]);
        return;
      }

      setIsSearching(true);
      try {
        const results = await archiveAPI.semanticSearch(query, searchFilters);
        setSearchResults(results);
      } catch (error) {
        console.error('Semantic search failed:', error);
        setSearchResults([]);
      } finally {
        setIsSearching(false);
      }
    }, 500),
    [searchFilters]
  );

  const handleSearchChange = (e) => {
    const query = e.target.value;
    setSearchQuery(query);
    
    if (searchMode === 'semantic') {
      debouncedSemanticSearch(query);
    }
  };

  const handleManualSearch = async () => {
    if (!searchQuery.trim()) return;

    setIsSearching(true);
    try {
      let results;
      if (searchMode === 'semantic') {
        results = await archiveAPI.semanticSearch(searchQuery, searchFilters);
      } else {
        results = await archiveAPI.simpleSearch(searchQuery, searchFilters);
      }
      setSearchResults(results);
    } catch (error) {
      console.error('Search failed:', error);
      setSearchResults([]);
    } finally {
      setIsSearching(false);
    }
  };

  const handleFilterChange = (filterName, value) => {
    setSearchFilters(prev => ({
      ...prev,
      [filterName]: value
    }));
  };

  const clearFilters = () => {
    setSearchFilters({
      category: '',
      dateFrom: '',
      dateTo: '',
      accessLevel: '',
      fileType: ''
    });
  };

  const highlightText = (text, query) => {
    if (!query || !text) return text;
    
    const regex = new RegExp(`(${query})`, 'gi');
    return text.replace(regex, '<mark>$1</mark>');
  };

  return (
    <div className="archive-search">
      <h2 className="dashboard-title">–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫</h2>
      
      {/* –†–µ–∂–∏–º—ã –ø–æ–∏—Å–∫–∞ */}
      <div className="search-modes">
        <button 
          className={`archive-btn ${searchMode === 'semantic' ? 'primary' : ''}`}
          onClick={() => setSearchMode('semantic')}
        >
          ü§ñ –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫
        </button>
        <button 
          className={`archive-btn ${searchMode === 'simple' ? 'primary' : ''}`}
          onClick={() => setSearchMode('simple')}
        >
          üîç –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫
        </button>
        <button 
          className={`archive-btn ${searchMode === 'advanced' ? 'primary' : ''}`}
          onClick={() => setSearchMode('advanced')}
        >
          ‚öôÔ∏è –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫
        </button>
      </div>

      {/* –ü–æ–∏—Å–∫–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ */}
      <div className="archive-search-container">
        <div className="archive-search-icon">üîç</div>
        <input
          type="text"
          className="archive-search-input"
          placeholder={
            searchMode === 'semantic' 
              ? "–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤—ã –∏—â–µ—Ç–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º —è–∑—ã–∫–æ–º..."
              : "–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞..."
          }
          value={searchQuery}
          onChange={handleSearchChange}
          onKeyPress={(e) => e.key === 'Enter' && handleManualSearch()}
        />
        <button 
          className="search-button archive-btn primary"
          onClick={handleManualSearch}
          disabled={isSearching}
        >
          {isSearching ? '–ü–æ–∏—Å–∫...' : '–ù–∞–π—Ç–∏'}
        </button>
      </div>

      {/* –ü–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞ */}
      {searchMode === 'semantic' && (
        <div className="search-hints">
          <p>üí° –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:</p>
          <div className="hint-tags">
            <span className="hint-tag" onClick={() => setSearchQuery('–¥–æ–≥–æ–≤–æ—Ä—ã —Å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º–∏')}>
              –¥–æ–≥–æ–≤–æ—Ä—ã —Å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º–∏
            </span>
            <span className="hint-tag" onClick={() => setSearchQuery('—Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –æ—Ç—á–µ—Ç—ã –∑–∞ –ø—Ä–æ—à–ª—ã–π –≥–æ–¥')}>
              —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –æ—Ç—á–µ—Ç—ã –∑–∞ –ø—Ä–æ—à–ª—ã–π –≥–æ–¥
            </span>
            <span className="hint-tag" onClick={() => setSearchQuery('–¥–æ–∫—É–º–µ–Ω—Ç—ã —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ')}>
              –¥–æ–∫—É–º–µ–Ω—Ç—ã —Å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            </span>
          </div>
        </div>
      )}

      {/* –§–∏–ª—å—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ */}
      <div className="archive-card">
        <div className="archive-card-header">
          <h3 className="archive-card-title">–§–∏–ª—å—Ç—Ä—ã –ø–æ–∏—Å–∫–∞</h3>
          <button className="archive-btn" onClick={clearFilters}>
            –û—á–∏—Å—Ç–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã
          </button>
        </div>
        <div className="search-filters">
          <div className="filter-group">
            <label>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</label>
            <select 
              className="archive-input"
              value={searchFilters.category}
              onChange={(e) => handleFilterChange('category', e.target.value)}
            >
              <option value="">–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</option>
              {categories.map(cat => (
                <option key={cat.id} value={cat.id}>{cat.name}</option>
              ))}
            </select>
          </div>
          
          <div className="filter-group">
            <label>–î–∞—Ç–∞ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç:</label>
            <input 
              type="date"
              className="archive-input"
              value={searchFilters.dateFrom}
              onChange={(e) => handleFilterChange('dateFrom', e.target.value)}
            />
          </div>
          
          <div className="filter-group">
            <label>–î–æ:</label>
            <input 
              type="date"
              className="archive-input"
              value={searchFilters.dateTo}
              onChange={(e) => handleFilterChange('dateTo', e.target.value)}
            />
          </div>
          
          <div className="filter-group">
            <label>–£—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞:</label>
            <select 
              className="archive-input"
              value={searchFilters.accessLevel}
              onChange={(e) => handleFilterChange('accessLevel', e.target.value)}
            >
              <option value="">–õ—é–±–æ–π</option>
              <option value="public">–ü—É–±–ª–∏—á–Ω—ã–π</option>
              <option value="internal">–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π</option>
              <option value="confidential">–ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π</option>
              <option value="restricted">–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π</option>
            </select>
          </div>
          
          <div className="filter-group">
            <label>–¢–∏–ø —Ñ–∞–π–ª–∞:</label>
            <select 
              className="archive-input"
              value={searchFilters.fileType}
              onChange={(e) => handleFilterChange('fileType', e.target.value)}
            >
              <option value="">–í—Å–µ —Ç–∏–ø—ã</option>
              <option value="pdf">PDF</option>
              <option value="doc">Word</option>
              <option value="excel">Excel</option>
              <option value="image">–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</option>
              <option value="text">–¢–µ–∫—Å—Ç–æ–≤—ã–µ</option>
            </select>
          </div>
        </div>
      </div>

      {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ */}
      <div className="search-results">
        {isSearching && (
          <div className="archive-loading">
            <div className="archive-spinner"></div>
            {searchMode === 'semantic' ? '–ò–ò –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å...' : '–ü–æ–∏—Å–∫...'}
          </div>
        )}

        {!isSearching && searchResults.length > 0 && (
          <>
            <div className="results-header">
              <h3>–ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {searchResults.length}</h3>
              {searchMode === 'semantic' && (
                <p className="semantic-note">
                  ü§ñ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
                </p>
              )}
            </div>
            
            <div className="results-list">
              {searchResults.map((result, index) => (
                <div key={index} className="result-item archive-card">
                  <div className="result-header">
                    <h4 className="result-title">
                      {result.document?.original_file?.name || '–î–æ–∫—É–º–µ–Ω—Ç'}
                    </h4>
                    <div className="result-meta">
                      {searchMode === 'semantic' && (
                        <span className="similarity-score">
                          –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {Math.round((result.similarity || 0) * 100)}%
                        </span>
                      )}
                      <span className="result-category">
                        {result.document?.category?.name}
                      </span>
                      <span className="result-date">
                        {new Date(result.document?.archived_at).toLocaleDateString()}
                      </span>
                    </div>
                  </div>
                  
                  <div className="result-content">
                    {result.summary && (
                      <p className="result-summary"
                         dangerouslySetInnerHTML={{ 
                           __html: highlightText(result.summary, searchQuery) 
                         }}
                      />
                    )}
                    
                    {result.keywords && result.keywords.length > 0 && (
                      <div className="result-keywords">
                        <strong>–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:</strong>
                        {result.keywords.map((keyword, idx) => (
                          <span key={idx} className="keyword-tag">{keyword}</span>
                        ))}
                      </div>
                    )}
                  </div>
                  
                  <div className="result-actions">
                    <button className="archive-btn">–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å</button>
                    <button className="archive-btn">–°–∫–∞—á–∞—Ç—å</button>
                    <button className="archive-btn">–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ</button>
                  </div>
                </div>
              ))}
            </div>
          </>
        )}

        {!isSearching && searchQuery && searchResults.length === 0 && (
          <div className="no-results">
            <h3>–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</h3>
            <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã</p>
            {searchMode === 'semantic' && (
              <p>
                üí° –î–ª—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã: 
                "–¥–æ–∫—É–º–µ–Ω—Ç—ã –æ –∑–∞–∫—É–ø–∫–∞—Ö", "–æ—Ç—á–µ—Ç—ã –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º" –∏ —Ç.–¥.
              </p>
            )}
          </div>
        )}
      </div>
    </div>
  );
};

export default ArchiveSearch;
