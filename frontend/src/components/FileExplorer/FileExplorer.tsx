import React, { useEffect, useState } from 'react';
import { FileItem } from '../../types/FileTypes';
import { WebSocketService } from '../../services/WebSocketService';
import { FileService } from '../../services/FileService';
import { FileDropZone } from '../FileDropZone/FileDropZone';
import { DraggableFileItem } from '../DraggableFileItem/DraggableFileItem';
import { ToastManager } from '../Toast/Toast';
import { CodeChan } from '../CodeChan/CodeChan';
import { CodeChanMood } from '../CodeChan/CodeChanTypes';
import { SearchBar } from '../SearchBar/SearchBar';
import { FileInfo } from '../FileInfo/FileInfo';
import { FileStats } from '../FileStats/FileStats';
import { QuickActions } from '../QuickActions/QuickActions';
import { FilePreview } from '../FilePreview/FilePreview';
import { useToast } from '../../hooks/useToast';
import { useHotKeys, HotKey } from '../../hooks/useHotKeys';
import './FileExplorer.css';

interface FileExplorerProps {
    initialPath: string;
    onFileSelect?: (file: FileItem) => void;
    onDirectoryChange?: (path: string) => void;
    onFileUpload?: (files: FileItem[]) => void;
}

export const FileExplorer: React.FC<FileExplorerProps> = ({
    initialPath,
    onFileSelect,
    onDirectoryChange,
    onFileUpload,
}) => {
    const [currentPath, setCurrentPath] = useState(initialPath);
    const [files, setFiles] = useState<FileItem[]>([]);
    const [filteredFiles, setFilteredFiles] = useState<FileItem[]>([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);
    const [selectedFile, setSelectedFile] = useState<FileItem | null>(null);
    const [searchQuery, setSearchQuery] = useState('');
    const [filterType, setFilterType] = useState('all');
    const [showFileInfo, setShowFileInfo] = useState<FileItem | null>(null);
    const [previewFile, setPreviewFile] = useState<FileItem | null>(null);
    const fileService = new FileService();
    const { toasts, removeToast, showSuccess, showError, showWarning } = useToast();
    
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ Code Chan
    const [codeChanState, setCodeChanState] = useState({
        message: "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ñ–∞–π–ª–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä! –ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–∞–π–ª—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ üìÅ‚ú®",
        mood: 'happy' as CodeChanMood
    });

    // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    const handleSearch = (query: string) => {
        setSearchQuery(query);
        applyFilters(files, query, filterType);
    };

    const handleFilterChange = (type: string) => {
        setFilterType(type);
        applyFilters(files, searchQuery, type);
    };

    const applyFilters = (fileList: FileItem[], query: string, type: string) => {
        let filtered = [...fileList];

        // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ–∏—Å–∫
        if (query.trim()) {
            filtered = filtered.filter(file => 
                file.name.toLowerCase().includes(query.toLowerCase())
            );
        }

        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É
        switch (type) {
            case 'files':
                filtered = filtered.filter(file => !file.is_directory);
                break;
            case 'folders':
                filtered = filtered.filter(file => file.is_directory);
                break;
            case 'images':
                filtered = filtered.filter(file => {
                    if (file.is_directory) return false;
                    const ext = file.name.split('.').pop()?.toLowerCase();
                    return ['jpg', 'jpeg', 'png', 'gif', 'svg', 'webp', 'bmp'].includes(ext || '');
                });
                break;
            case 'documents':
                filtered = filtered.filter(file => {
                    if (file.is_directory) return false;
                    const ext = file.name.split('.').pop()?.toLowerCase();
                    return ['pdf', 'doc', 'docx', 'txt', 'rtf', 'odt'].includes(ext || '');
                });
                break;
            case 'code':
                filtered = filtered.filter(file => {
                    if (file.is_directory) return false;
                    const ext = file.name.split('.').pop()?.toLowerCase();
                    return ['js', 'jsx', 'ts', 'tsx', 'py', 'java', 'cpp', 'c', 'h', 'css', 'scss', 'html', 'php', 'go', 'rs', 'swift'].includes(ext || '');
                });
                break;
            case 'media':
                filtered = filtered.filter(file => {
                    if (file.is_directory) return false;
                    const ext = file.name.split('.').pop()?.toLowerCase();
                    return ['mp4', 'avi', 'mov', 'mkv', 'mp3', 'wav', 'flac', 'aac'].includes(ext || '');
                });
                break;
            default:
                // 'all' - –Ω–µ —Ñ–∏–ª—å—Ç—Ä—É–µ–º
                break;
        }

        setFilteredFiles(filtered);
    };

    useEffect(() => {
        const ws = WebSocketService.getInstance();
        
        // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
        ws.subscribe('file_system_updates', (data) => {
            if (data.path.startsWith(currentPath)) {
                fetchFiles();
            }
        });

        fetchFiles();

        return () => {
            ws.unsubscribe('file_system_updates');
        };
    }, [currentPath]);

    const fetchFiles = async () => {
        try {
            setLoading(true);
            const data = await fileService.getFiles(currentPath);
            setFiles(data);
            applyFilters(data, searchQuery, filterType); // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã
            setError(null);
        } catch (err) {
            setError(err instanceof Error ? err.message : 'Unknown error');
        } finally {
            setLoading(false);
        }
    };

    const handleFilesDropped = async (fileList: FileList) => {
        try {
            setLoading(true);
            setCodeChanState({
                message: `–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é ${fileList.length} —Ñ–∞–π–ª(–æ–≤)... üíª‚ö°`,
                mood: 'working'
            });
            
            const files = Array.from(fileList);
            
            showWarning(`–ó–∞–≥—Ä—É–∑–∫–∞ ${files.length} —Ñ–∞–π–ª(–æ–≤)...`);
            
            const uploadPromises = files.map(file => fileService.uploadFile(file, currentPath));
            const uploadedFiles = await Promise.all(uploadPromises);
            
            setCodeChanState({
                message: `–û—Ç–ª–∏—á–Ω–æ! –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${files.length} —Ñ–∞–π–ª(–æ–≤)! üéâ`,
                mood: 'happy'
            });
            showSuccess(`–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ ${files.length} —Ñ–∞–π–ª(–æ–≤)`);
            onFileUpload?.(uploadedFiles);
            await fetchFiles(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
            
            setTimeout(() => {
                setCodeChanState({
                    message: "–ß—Ç–æ –∑–∞–≥—Ä—É–∑–∏–º –¥–∞–ª—å—à–µ? üòä",
                    mood: 'happy'
                });
            }, 3000);
        } catch (err) {
            const errorMessage = err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏';
            setCodeChanState({
                message: `–£–ø—Å! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... üòµ‚Äçüí´`,
                mood: 'error'
            });
            showError(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã: ${errorMessage}`);
            setError(errorMessage);
        } finally {
            setLoading(false);
        }
    };

    const handleFileClick = (file: FileItem) => {
        setSelectedFile(file);
        if (file.is_directory) {
            const newPath = file.path + '/' + file.name;
            setCurrentPath(newPath);
            onDirectoryChange?.(newPath);
        } else {
            onFileSelect?.(file);
        }
    };

    const handleFileMove = async (sourceFile: FileItem, targetPath: string) => {
        try {
            setLoading(true);
            setCodeChanState({
                message: `–ü–µ—Ä–µ–º–µ—â–∞—é "${sourceFile.name}"... üöÄ`,
                mood: 'working'
            });
            showWarning(`–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ ${sourceFile.name}...`);
            
            await fileService.moveFile(sourceFile.path + '/' + sourceFile.name, targetPath);
            
            setCodeChanState({
                message: `–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω! üéØ`,
                mood: 'happy'
            });
            showSuccess(`–§–∞–π–ª "${sourceFile.name}" —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω`);
            await fetchFiles(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
            
            setTimeout(() => {
                setCodeChanState({
                    message: "–ì–æ—Ç–æ–≤ –∫ –Ω–æ–≤—ã–º –æ–ø–µ—Ä–∞—Ü–∏—è–º! üòä",
                    mood: 'happy'
                });
            }, 2000);
        } catch (err) {
            const errorMessage = err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞';
            setCodeChanState({
                message: `–ù–µ –º–æ–≥—É –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —Ñ–∞–π–ª... üòì`,
                mood: 'error'
            });
            showError(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —Ñ–∞–π–ª: ${errorMessage}`);
            setError(errorMessage);
        } finally {
            setLoading(false);
        }
    };

    const navigateUp = () => {
        const parentPath = currentPath.split('/').slice(0, -1).join('/') || '/';
        setCurrentPath(parentPath);
        onDirectoryChange?.(parentPath);
    };

    const handleFileDelete = async (file: FileItem) => {
        try {
            setLoading(true);
            setCodeChanState({
                message: `–£–¥–∞–ª—è—é "${file.name}"... üóëÔ∏è`,
                mood: 'thinking'
            });
            showWarning(`–£–¥–∞–ª–µ–Ω–∏–µ ${file.name}...`);
            
            await fileService.deleteFile(file.path + '/' + file.name);
            
            setCodeChanState({
                message: `–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω! ‚ú®`,
                mood: 'happy'
            });
            showSuccess(`"${file.name}" —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω`);
            await fetchFiles();
            
            setTimeout(() => {
                setCodeChanState({
                    message: "–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ! üìÅ",
                    mood: 'happy'
                });
            }, 2000);
        } catch (err) {
            const errorMessage = err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏';
            setCodeChanState({
                message: `–ù–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è —É–¥–∞–ª–∏—Ç—å... üòµ‚Äçüí´`,
                mood: 'error'
            });
            showError(`–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª: ${errorMessage}`);
            setError(errorMessage);
        } finally {
            setLoading(false);
        }
    };

    const handleFileRename = async (file: FileItem, newName: string) => {
        try {
            setLoading(true);
            showWarning(`–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ ${file.name}...`);
            
            const newPath = file.path + '/' + newName;
            await fileService.moveFile(file.path + '/' + file.name, newPath);
            
            showSuccess(`"${file.name}" –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –≤ "${newName}"`);
            await fetchFiles();
        } catch (err) {
            const errorMessage = err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏';
            showError(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å —Ñ–∞–π–ª: ${errorMessage}`);
            setError(errorMessage);
        } finally {
            setLoading(false);
        }
    };

    const handleFileCopy = async (file: FileItem) => {
        try {
            // –ö–æ–ø–∏—Ä—É–µ–º –ø—É—Ç—å –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ (–ø—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)
            await navigator.clipboard.writeText(file.path + '/' + file.name);
            showSuccess(`–ü—É—Ç—å –∫ "${file.name}" —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞`);
        } catch (err) {
            showError('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ø—É—Ç—å –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞');
        }
    };

    const handleFileInfoToggle = (file: FileItem) => {
        setShowFileInfo(file);
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
    const handleNewFolder = async () => {
        const folderName = prompt('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–∞–ø–∫–∏:');
        if (folderName) {
            try {
                setCodeChanState({
                    message: `–°–æ–∑–¥–∞—é –ø–∞–ø–∫—É "${folderName}"... üìÅ‚ú®`,
                    mood: 'working'
                });
                showWarning(`–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ "${folderName}"...`);
                
                await fileService.createFolder(folderName, currentPath);
                
                setCodeChanState({
                    message: `–ü–∞–ø–∫–∞ "${folderName}" —Å–æ–∑–¥–∞–Ω–∞! üéâ`,
                    mood: 'happy'
                });
                showSuccess(`–ü–∞–ø–∫–∞ "${folderName}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞`);
                await fetchFiles(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
            } catch (err) {
                const errorMessage = err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞–ø–∫–∏';
                setCodeChanState({
                    message: `–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É... üòì`,
                    mood: 'error'
                });
                showError(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É: ${errorMessage}`);
            }
        }
    };

    const handleUpload = () => {
        const input = document.createElement('input');
        input.type = 'file';
        input.multiple = true;
        input.onchange = (e) => {
            const files = (e.target as HTMLInputElement).files;
            if (files) {
                handleFilesDropped(files);
            }
        };
        input.click();
    };

    const handleRefresh = () => {
        setCodeChanState({
            message: '–û–±–Ω–æ–≤–ª—è—é —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤... üîÑ',
            mood: 'working'
        });
        fetchFiles();
        showSuccess('–°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω');
        setTimeout(() => {
            setCodeChanState({
                message: '–°–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω! –í—Å–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ! ‚ú®',
                mood: 'happy'
            });
        }, 1000);
    };

    const handleSettings = () => {
        setCodeChanState({
            message: '–û—Ç–∫—Ä—ã–≤–∞—é –ø–∞–Ω–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫... üîß‚ú®',
            mood: 'thinking'
        });
        
        // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        const settings = [
            '–¢–µ–º–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞',
            '–†–∞–∑–º–µ—Ä —Å–µ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤', 
            '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ',
            '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
            '–Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞',
            '–ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏'
        ];
        
        setTimeout(() => {
            setCodeChanState({
                message: `–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: ${settings.slice(0, 3).join(', ')} –∏ –µ—â–µ ${settings.length - 3}! üõ†Ô∏è`,
                mood: 'happy'
            });
        }, 1500);
        
        setTimeout(() => {
            setCodeChanState({
                message: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏! –ê –ø–æ–∫–∞ –¥–∞–≤–∞–π—Ç–µ –ø–æ—Ä–∞–±–æ—Ç–∞–µ–º —Å —Ñ–∞–π–ª–∞–º–∏! üìÅ‚ú®',
                mood: 'happy'
            });
        }, 4000);
    };

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    const handleCodeChanDemo = () => {
        const demoMessages = [
            { message: "–î–∞–≤–∞–π—Ç–µ —è –ø–æ–∫–∞–∂—É —Å–≤–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏! üåü", mood: 'excited' as CodeChanMood },
            { message: "–Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å —Ñ–∞–π–ª–∞–º–∏! üìÅ", mood: 'happy' as CodeChanMood },
            { message: "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ç–∞—â–∏—Ç—å —Ñ–∞–π–ª –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É! üöÄ", mood: 'thinking' as CodeChanMood },
            { message: "–Ø –±—É–¥—É —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –≤–∞—à–∏ –¥–µ–π—Å—Ç–≤–∏—è! üòä", mood: 'happy' as CodeChanMood },
            { message: "–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ! –ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å? ‚ú®", mood: 'happy' as CodeChanMood }
        ];
        
        let index = 0;
        const showNextMessage = () => {
            if (index < demoMessages.length) {
                setCodeChanState(demoMessages[index]);
                index++;
                setTimeout(showNextMessage, 2500);
            }
        };
        showNextMessage();
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–∞–π–ª–∞
    const handleFilePreview = (file: FileItem) => {
        if (file.type === 'file') {
            setPreviewFile(file);
            setCodeChanState({
                message: `–û—Ç–∫—Ä—ã–≤–∞—é –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Ñ–∞–π–ª–∞ ${file.name} üëÄ`,
                mood: 'working'
            });
        }
    };

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    const handleClosePreview = () => {
        setPreviewFile(null);
        setCodeChanState({
            message: "–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–∫—Ä—ã—Ç! –ß—Ç–æ –¥–∞–ª—å—à–µ? üòä",
            mood: 'happy'
        });
    };

    // –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ –¥–ª—è FileExplorer
    const hotKeys: HotKey[] = [
        { key: 'n', ctrl: true, action: handleNewFolder, description: '–§–∞–π–ª—ã: –°–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É' },
        { key: 'u', ctrl: true, action: handleUpload, description: '–§–∞–π–ª—ã: –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã' },
        { key: 'F5', action: handleRefresh, description: '–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤' },
        { key: 'Delete', action: () => selectedFile && handleFileDelete(selectedFile), description: '–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª' },
        { key: 'Enter', action: () => selectedFile && handleFileClick(selectedFile), description: '–û—Ç–∫—Ä—ã—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª/–ø–∞–ø–∫—É' },
        { key: 'Backspace', action: navigateUp, description: '–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –≤–≤–µ—Ä—Ö' },
        { key: 'i', ctrl: true, action: () => selectedFile && handleFileInfoToggle(selectedFile), description: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ' },
        { key: 'p', ctrl: true, action: () => selectedFile && !selectedFile.is_directory && handleFilePreview(selectedFile), description: '–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä' }
    ];

    useHotKeys(hotKeys);

    return (
        <>
            <FileDropZone onFilesSelected={handleFilesDropped} currentPath={currentPath}>
                <div className="file-explorer">
                    <div className="file-explorer-header">
                        <button 
                            onClick={navigateUp}
                            disabled={currentPath === '/'}
                            className="navigate-up-btn"
                        >
                            ‚Üë Up
                        </button>
                        <div className="current-path">{currentPath}</div>
                    </div>
                    
                    <div className="file-explorer-controls">
                        <SearchBar 
                            onSearch={handleSearch}
                            onFilterChange={handleFilterChange}
                        />
                        
                        <FileStats 
                            files={filteredFiles}
                            currentPath={currentPath}
                        />
                        
                        <QuickActions 
                            onNewFolder={handleNewFolder}
                            onUpload={handleUpload}
                            onRefresh={handleRefresh}
                            onSettings={handleSettings}
                        />
                    </div>
                    
                    {loading && <div className="file-explorer-loading">Loading...</div>}
                    {error && <div className="file-explorer-error">{error}</div>}
                    
                    {!loading && !error && (
                        <div className="file-list">
                            {filteredFiles.sort((a, b) => {
                                // –°–Ω–∞—á–∞–ª–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –ø–æ—Ç–æ–º —Ñ–∞–π–ª—ã
                                if (a.is_directory && !b.is_directory) return -1;
                                if (!a.is_directory && b.is_directory) return 1;
                                return a.name.localeCompare(b.name);
                            }).map((file, index) => (
                                <DraggableFileItem
                                    key={`${file.name}-${index}`}
                                    file={file}
                                    isSelected={selectedFile?.name === file.name}
                                    onSelect={handleFileClick}
                                    onMove={handleFileMove}
                                    onDelete={handleFileDelete}
                                    onRename={handleFileRename}
                                    onCopy={handleFileCopy}
                                    onInfo={handleFileInfoToggle}
                                    onPreview={handleFilePreview} // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
                                />
                            ))}
                        </div>
                    )}
                    
                    {showFileInfo && (
                        <FileInfo 
                            file={showFileInfo} 
                            onClose={() => setShowFileInfo(null)}
                        />
                    )}
                    
                    {previewFile && (
                        <FilePreview 
                            file={previewFile}
                            onClose={handleClosePreview}
                        />
                    )}
                </div>
            </FileDropZone>
            
            <CodeChan 
                message={codeChanState.message}
                mood={codeChanState.mood}
                onInteract={handleCodeChanDemo}
            />
            
            <ToastManager toasts={toasts} onRemoveToast={removeToast} />
        </>
    );
};
