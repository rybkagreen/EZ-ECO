import React, { useState, useEffect } from 'react';
import { WebSocketService } from '../../services/WebSocketService';

interface ConnectionStatusProps {
    className?: string;
}

export const ConnectionStatus: React.FC<ConnectionStatusProps> = ({ className = '' }) => {
    const [connectionState, setConnectionState] = useState<string>('DISCONNECTED');
    const [lastMessage, setLastMessage] = useState<string>('');

    useEffect(() => {
        const ws = WebSocketService.getInstance();
        
        // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        const handleConnectionChange = (data: any) => {
            console.log('Connection status changed:', data);
            setConnectionState(ws.getConnectionState());
            
            if (data.status === 'connected') {
                setLastMessage('‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
            } else if (data.status === 'disconnected') {
                setLastMessage('‚ùå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ');
            } else if (data.status === 'error') {
                setLastMessage('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è');
            } else if (data.status === 'max_retries_exceeded') {
                setLastMessage('üîÑ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
            }
        };

        ws.subscribe('connection', handleConnectionChange);

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
        setConnectionState(ws.getConnectionState());

        return () => {
            ws.unsubscribe('connection', handleConnectionChange);
        };
    }, []);

    const getStatusColor = () => {
        switch (connectionState) {
            case 'OPEN': return 'text-green-500';
            case 'CONNECTING': return 'text-yellow-500';
            case 'CLOSING': return 'text-orange-500';
            case 'CLOSED':
            case 'DISCONNECTED':
            default: return 'text-red-500';
        }
    };

    const getStatusIcon = () => {
        switch (connectionState) {
            case 'OPEN': return 'üü¢';
            case 'CONNECTING': return 'üü°';
            case 'CLOSING': return 'üü†';
            case 'CLOSED':
            case 'DISCONNECTED':
            default: return 'üî¥';
        }
    };

    const getStatusText = () => {
        switch (connectionState) {
            case 'OPEN': return '–ü–æ–¥–∫–ª—é—á–µ–Ω';
            case 'CONNECTING': return '–ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è...';
            case 'CLOSING': return '–û—Ç–∫–ª—é—á–∞–µ—Ç—Å—è...';
            case 'CLOSED': return '–û—Ç–∫–ª—é—á–µ–Ω';
            case 'DISCONNECTED': return '–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω';
            default: return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
        }
    };

    const handleReconnect = () => {
        const ws = WebSocketService.getInstance();
        // –î–ª—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
        ws.disconnect();
        setLastMessage('üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...');
        // –ù–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–ø—Ä–æ—Å–µ
        setTimeout(() => {
            WebSocketService.getInstance();
        }, 1000);
    };

    return (
        <div className={`connection-status bg-white dark:bg-gray-800 border rounded-lg p-3 shadow-sm ${className}`}>
            <div className="flex items-center justify-between">
                <div className="flex items-center space-x-2">
                    <span className="text-lg">{getStatusIcon()}</span>
                    <span className={`text-sm font-medium ${getStatusColor()}`}>
                        {getStatusText()}
                    </span>
                </div>
                
                {(connectionState === 'CLOSED' || connectionState === 'DISCONNECTED') && (
                    <button
                        onClick={handleReconnect}
                        className="px-3 py-1 text-xs bg-blue-500 text-white rounded hover:bg-blue-600 transition-colors"
                        title="–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è"
                    >
                        üîÑ
                    </button>
                )}
            </div>
            
            {lastMessage && (
                <div className="mt-2 text-xs text-gray-600 dark:text-gray-400">
                    {lastMessage}
                </div>
            )}
            
            {/* –î–µ—Ç–∞–ª–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ */}
            {process.env.NODE_ENV === 'development' && (
                <div className="mt-2 text-xs text-gray-500 font-mono">
                    WebSocket: ws://localhost:8001/ws/filemanager/
                </div>
            )}
        </div>
    );
};
