{"ast":null,"code":"export class FileService {\n  constructor() {\n    this.baseUrl = 'http://localhost:8000/api/v1';\n  }\n  async getFiles(path = '') {\n    let url = `${this.baseUrl}/files/`;\n    if (path && path !== '/') {\n      url = `${this.baseUrl}/files/directory/?path=${encodeURIComponent(path)}`;\n    }\n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error(`Failed to fetch files: ${response.statusText}`);\n    }\n    const data = await response.json();\n    return data.files || [];\n  }\n  async uploadFile(file, parentPath) {\n    const formData = new FormData();\n    formData.append('file', file);\n    formData.append('parent_path', parentPath);\n    const response = await fetch(`${this.baseUrl}/upload/`, {\n      method: 'POST',\n      body: formData\n    });\n    if (!response.ok) {\n      throw new Error(`Failed to upload file ${file.name}: ${response.statusText}`);\n    }\n    return response.json();\n  }\n  async createDirectory(name, parentPath) {\n    const response = await fetch(`${this.baseUrl}/create-directory/`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name,\n        parent_path: parentPath\n      })\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.error || `Failed to create directory: ${response.statusText}`);\n    }\n    const data = await response.json();\n    return {\n      name: data.name,\n      path: data.path,\n      is_directory: data.is_directory,\n      size: 0\n    };\n  }\n  async createFolder(folderName, path = '/') {\n    const response = await fetch(`${this.baseUrl}/create-folder/`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name: folderName,\n        path: path\n      })\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.error || `Failed to create folder: ${response.statusText}`);\n    }\n  }\n  async deleteFile(filePath) {\n    const response = await fetch(`${this.baseUrl}/delete-file/`, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        path: filePath\n      })\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.error || `Failed to delete file: ${response.statusText}`);\n    }\n  }\n  async moveFile(sourcePath, targetPath) {\n    const response = await fetch(`${this.baseUrl}/move-file/`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        source_path: sourcePath,\n        target_path: targetPath\n      })\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.error || `Failed to move file: ${response.statusText}`);\n    }\n    const data = await response.json();\n    return {\n      name: data.name,\n      path: data.path,\n      is_directory: data.is_directory,\n      size: data.size || 0,\n      modified: data.modified\n    };\n  }\n}","map":{"version":3,"names":["FileService","constructor","baseUrl","getFiles","path","url","encodeURIComponent","response","fetch","ok","Error","statusText","data","json","files","uploadFile","file","parentPath","formData","FormData","append","method","body","name","createDirectory","headers","JSON","stringify","parent_path","errorData","error","is_directory","size","createFolder","folderName","deleteFile","filePath","moveFile","sourcePath","targetPath","source_path","target_path","modified"],"sources":["/workspaces/codespaces-django/frontend/src/services/FileService.ts"],"sourcesContent":["import { FileItem } from '../types/FileTypes';\n\nexport class FileService {\n    private baseUrl = 'http://localhost:8000/api/v1';\n\n    async getFiles(path: string = ''): Promise<FileItem[]> {\n        let url = `${this.baseUrl}/files/`;\n        if (path && path !== '/') {\n            url = `${this.baseUrl}/files/directory/?path=${encodeURIComponent(path)}`;\n        }\n        \n        const response = await fetch(url);\n        if (!response.ok) {\n            throw new Error(`Failed to fetch files: ${response.statusText}`);\n        }\n        const data = await response.json();\n        return data.files || [];\n    }\n\n    async uploadFile(file: File, parentPath: string): Promise<FileItem> {\n        const formData = new FormData();\n        formData.append('file', file);\n        formData.append('parent_path', parentPath);\n\n        const response = await fetch(`${this.baseUrl}/upload/`, {\n            method: 'POST',\n            body: formData,\n        });\n\n        if (!response.ok) {\n            throw new Error(`Failed to upload file ${file.name}: ${response.statusText}`);\n        }\n\n        return response.json();\n    }\n\n    async createDirectory(name: string, parentPath: string): Promise<FileItem> {\n        const response = await fetch(`${this.baseUrl}/create-directory/`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                name,\n                parent_path: parentPath\n            }),\n        });\n\n        if (!response.ok) {\n            const errorData = await response.json();\n            throw new Error(errorData.error || `Failed to create directory: ${response.statusText}`);\n        }\n\n        const data = await response.json();\n        return {\n            name: data.name,\n            path: data.path,\n            is_directory: data.is_directory,\n            size: 0\n        };\n    }\n\n    async createFolder(folderName: string, path: string = '/'): Promise<void> {\n        const response = await fetch(`${this.baseUrl}/create-folder/`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                name: folderName,\n                path: path\n            }),\n        });\n\n        if (!response.ok) {\n            const errorData = await response.json();\n            throw new Error(errorData.error || `Failed to create folder: ${response.statusText}`);\n        }\n    }\n\n    async deleteFile(filePath: string): Promise<void> {\n        const response = await fetch(`${this.baseUrl}/delete-file/`, {\n            method: 'DELETE',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                path: filePath\n            }),\n        });\n\n        if (!response.ok) {\n            const errorData = await response.json();\n            throw new Error(errorData.error || `Failed to delete file: ${response.statusText}`);\n        }\n    }\n\n    async moveFile(sourcePath: string, targetPath: string): Promise<FileItem> {\n        const response = await fetch(`${this.baseUrl}/move-file/`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                source_path: sourcePath,\n                target_path: targetPath\n            }),\n        });\n\n        if (!response.ok) {\n            const errorData = await response.json();\n            throw new Error(errorData.error || `Failed to move file: ${response.statusText}`);\n        }\n\n        const data = await response.json();\n        return {\n            name: data.name,\n            path: data.path,\n            is_directory: data.is_directory,\n            size: data.size || 0,\n            modified: data.modified\n        };\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}