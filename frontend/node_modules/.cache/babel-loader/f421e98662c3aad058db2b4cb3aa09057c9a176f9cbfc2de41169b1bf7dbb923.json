{"ast":null,"code":"var _jsxFileName = \"/workspaces/codespaces-django/frontend/src/components/FilePreviewCache/FilePreviewCache.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback, useMemo } from 'react';\nimport './FilePreviewCache.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DEFAULT_CONFIG = {\n  maxSize: 100,\n  maxMemory: 50,\n  // 50MB\n  ttl: 30 * 60 * 1000,\n  // 30 minutes\n  enableThumbnails: true,\n  thumbnailSize: 200,\n  preloadStrategy: 'intelligent',\n  compressionLevel: 0.8\n};\nclass FilePreviewCacheManager {\n  constructor(config = {}) {\n    this.cache = new Map();\n    this.accessOrder = [];\n    this.config = void 0;\n    this.stats = {\n      totalItems: 0,\n      memoryUsage: 0,\n      hitRate: 0,\n      missRate: 0,\n      evictions: 0,\n      totalSize: 0,\n      oldestItem: 0,\n      newestItem: 0\n    };\n    this.hits = 0;\n    this.misses = 0;\n    this.config = {\n      ...DEFAULT_CONFIG,\n      ...config\n    };\n    this.startCleanupTimer();\n  }\n  async generatePreview(file) {\n    const id = this.generateId(file);\n    const existing = this.get(id);\n    if (existing && !this.isExpired(existing)) {\n      this.hits++;\n      this.updateAccessOrder(id);\n      return existing;\n    }\n    this.misses++;\n    const preview = await this.createPreview(file);\n    this.set(id, preview);\n    return preview;\n  }\n  async createPreview(file) {\n    const preview = {\n      id: this.generateId(file),\n      filePath: file.name,\n      fileName: file.name,\n      fileSize: file.size,\n      fileType: this.getFileType(file.type),\n      mimeType: file.type,\n      lastModified: file.lastModified,\n      content: null,\n      cached: false,\n      cacheTime: Date.now(),\n      accessCount: 1,\n      lastAccessed: Date.now()\n    };\n    try {\n      // Generate content based on file type\n      if (file.type.startsWith('image/')) {\n        preview.content = await this.generateImagePreview(file);\n        preview.dimensions = await this.getImageDimensions(file);\n        if (this.config.enableThumbnails) {\n          preview.thumbnail = await this.generateThumbnail(file);\n        }\n      } else if (file.type.startsWith('video/')) {\n        preview.content = await this.generateVideoPreview(file);\n        preview.duration = await this.getVideoDuration(file);\n        if (this.config.enableThumbnails) {\n          preview.thumbnail = await this.generateVideoThumbnail(file);\n        }\n      } else if (file.type.startsWith('audio/')) {\n        preview.content = await this.generateAudioPreview(file);\n        preview.duration = await this.getAudioDuration(file);\n        preview.metadata = await this.getAudioMetadata(file);\n      } else if (file.type.startsWith('text/') || this.isTextFile(file.type)) {\n        preview.content = await this.generateTextPreview(file);\n      } else if (file.type === 'application/pdf') {\n        preview.content = await this.generatePDFPreview(file);\n        if (this.config.enableThumbnails) {\n          preview.thumbnail = await this.generatePDFThumbnail(file);\n        }\n      } else {\n        preview.content = await this.generateGenericPreview(file);\n      }\n      preview.cached = true;\n    } catch (error) {\n      console.error('Failed to generate preview:', error);\n      preview.content = null;\n    }\n    return preview;\n  }\n  async generateImagePreview(file) {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onload = () => resolve(reader.result);\n      reader.onerror = reject;\n      reader.readAsDataURL(file);\n    });\n  }\n  async generateVideoPreview(file) {\n    return new Promise((resolve, reject) => {\n      const video = document.createElement('video');\n      const url = URL.createObjectURL(file);\n      video.onloadedmetadata = () => {\n        video.currentTime = Math.min(video.duration / 2, 10); // Seek to middle or 10s\n      };\n      video.onseeked = () => {\n        const canvas = document.createElement('canvas');\n        canvas.width = this.config.thumbnailSize;\n        canvas.height = canvas.width * video.videoHeight / video.videoWidth;\n        const ctx = canvas.getContext('2d');\n        ctx === null || ctx === void 0 ? void 0 : ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n        URL.revokeObjectURL(url);\n        resolve(canvas.toDataURL('image/jpeg', this.config.compressionLevel));\n      };\n      video.onerror = reject;\n      video.src = url;\n    });\n  }\n  async generateAudioPreview(file) {\n    // Generate waveform or audio visualization\n    return new Promise(resolve => {\n      const canvas = document.createElement('canvas');\n      canvas.width = 300;\n      canvas.height = 100;\n      const ctx = canvas.getContext('2d');\n      if (ctx) {\n        // Generate a simple waveform visualization\n        ctx.fillStyle = '#3b82f6';\n        for (let i = 0; i < canvas.width; i += 4) {\n          const height = Math.random() * canvas.height;\n          ctx.fillRect(i, (canvas.height - height) / 2, 2, height);\n        }\n      }\n      resolve(canvas.toDataURL());\n    });\n  }\n  async generateTextPreview(file) {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onload = () => {\n        const text = reader.result;\n        // Get first 500 characters for preview\n        resolve(text.substring(0, 500) + (text.length > 500 ? '...' : ''));\n      };\n      reader.onerror = reject;\n      reader.readAsText(file);\n    });\n  }\n  async generatePDFPreview(file) {\n    // For PDF preview, you would typically use PDF.js\n    // This is a simplified implementation\n    return URL.createObjectURL(file);\n  }\n  async generateGenericPreview(file) {\n    return `File: ${file.name}\\nSize: ${this.formatFileSize(file.size)}\\nType: ${file.type}`;\n  }\n  async generateThumbnail(file) {\n    if (file.type.startsWith('image/')) {\n      return this.resizeImage(file, this.config.thumbnailSize);\n    }\n    return '';\n  }\n  async generateVideoThumbnail(file) {\n    return this.generateVideoPreview(file);\n  }\n  async generatePDFThumbnail(file) {\n    // PDF thumbnail generation would require PDF.js\n    return '';\n  }\n  async resizeImage(file, maxSize) {\n    return new Promise((resolve, reject) => {\n      const img = new Image();\n      const canvas = document.createElement('canvas');\n      const ctx = canvas.getContext('2d');\n      img.onload = () => {\n        const ratio = Math.min(maxSize / img.width, maxSize / img.height);\n        canvas.width = img.width * ratio;\n        canvas.height = img.height * ratio;\n        ctx === null || ctx === void 0 ? void 0 : ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n        resolve(canvas.toDataURL('image/jpeg', this.config.compressionLevel));\n      };\n      img.onerror = reject;\n      img.src = URL.createObjectURL(file);\n    });\n  }\n  async getImageDimensions(file) {\n    return new Promise((resolve, reject) => {\n      const img = new Image();\n      img.onload = () => resolve({\n        width: img.width,\n        height: img.height\n      });\n      img.onerror = reject;\n      img.src = URL.createObjectURL(file);\n    });\n  }\n  async getVideoDuration(file) {\n    return new Promise((resolve, reject) => {\n      const video = document.createElement('video');\n      video.onloadedmetadata = () => resolve(video.duration);\n      video.onerror = reject;\n      video.src = URL.createObjectURL(file);\n    });\n  }\n  async getAudioDuration(file) {\n    return new Promise((resolve, reject) => {\n      const audio = document.createElement('audio');\n      audio.onloadedmetadata = () => resolve(audio.duration);\n      audio.onerror = reject;\n      audio.src = URL.createObjectURL(file);\n    });\n  }\n  async getAudioMetadata(file) {\n    // Basic metadata extraction\n    return {\n      name: file.name,\n      size: file.size,\n      type: file.type,\n      lastModified: new Date(file.lastModified).toISOString()\n    };\n  }\n  generateId(file) {\n    return `${file.name}_${file.size}_${file.lastModified}`;\n  }\n  getFileType(mimeType) {\n    const [type] = mimeType.split('/');\n    return type || 'unknown';\n  }\n  isTextFile(mimeType) {\n    const textTypes = ['application/json', 'application/javascript', 'application/xml', 'application/x-yaml'];\n    return textTypes.includes(mimeType);\n  }\n  formatFileSize(bytes) {\n    const units = ['B', 'KB', 'MB', 'GB'];\n    let size = bytes;\n    let unitIndex = 0;\n    while (size >= 1024 && unitIndex < units.length - 1) {\n      size /= 1024;\n      unitIndex++;\n    }\n    return `${size.toFixed(1)} ${units[unitIndex]}`;\n  }\n  get(id) {\n    const item = this.cache.get(id);\n    if (item) {\n      item.accessCount++;\n      item.lastAccessed = Date.now();\n      this.updateAccessOrder(id);\n    }\n    return item;\n  }\n  set(id, preview) {\n    // Check if we need to evict items\n    if (this.cache.size >= this.config.maxSize) {\n      this.evictLRU();\n    }\n\n    // Check memory usage\n    const estimatedSize = this.estimateSize(preview);\n    if (this.stats.memoryUsage + estimatedSize > this.config.maxMemory * 1024 * 1024) {\n      this.evictByMemory(estimatedSize);\n    }\n    this.cache.set(id, preview);\n    this.updateAccessOrder(id);\n    this.updateStats();\n  }\n  updateAccessOrder(id) {\n    const index = this.accessOrder.indexOf(id);\n    if (index > -1) {\n      this.accessOrder.splice(index, 1);\n    }\n    this.accessOrder.push(id);\n  }\n  evictLRU() {\n    if (this.accessOrder.length > 0) {\n      const lruId = this.accessOrder.shift();\n      this.cache.delete(lruId);\n      this.stats.evictions++;\n    }\n  }\n  evictByMemory(requiredSize) {\n    while (this.stats.memoryUsage + requiredSize > this.config.maxMemory * 1024 * 1024 && this.cache.size > 0) {\n      this.evictLRU();\n      this.updateStats();\n    }\n  }\n  estimateSize(preview) {\n    let size = 0;\n\n    // Estimate content size\n    if (typeof preview.content === 'string') {\n      size += preview.content.length * 2; // UTF-16 encoding\n    } else if (preview.content instanceof ArrayBuffer) {\n      size += preview.content.byteLength;\n    }\n\n    // Estimate thumbnail size\n    if (preview.thumbnail) {\n      size += preview.thumbnail.length * 2;\n    }\n\n    // Add metadata overhead\n    size += JSON.stringify(preview).length * 2;\n    return size;\n  }\n  isExpired(preview) {\n    return Date.now() - preview.cacheTime > this.config.ttl;\n  }\n  updateStats() {\n    this.stats.totalItems = this.cache.size;\n    this.stats.hitRate = this.hits / (this.hits + this.misses) * 100;\n    this.stats.missRate = this.misses / (this.hits + this.misses) * 100;\n    let totalMemory = 0;\n    let oldest = Date.now();\n    let newest = 0;\n    for (const preview of this.cache.values()) {\n      totalMemory += this.estimateSize(preview);\n      oldest = Math.min(oldest, preview.cacheTime);\n      newest = Math.max(newest, preview.cacheTime);\n    }\n    this.stats.memoryUsage = totalMemory;\n    this.stats.totalSize = totalMemory;\n    this.stats.oldestItem = oldest;\n    this.stats.newestItem = newest;\n  }\n  startCleanupTimer() {\n    setInterval(() => {\n      const now = Date.now();\n      for (const [id, preview] of this.cache.entries()) {\n        if (this.isExpired(preview)) {\n          this.cache.delete(id);\n          const index = this.accessOrder.indexOf(id);\n          if (index > -1) {\n            this.accessOrder.splice(index, 1);\n          }\n        }\n      }\n      this.updateStats();\n    }, 60000); // Clean up every minute\n  }\n  getStats() {\n    this.updateStats();\n    return {\n      ...this.stats\n    };\n  }\n  clear() {\n    this.cache.clear();\n    this.accessOrder = [];\n    this.hits = 0;\n    this.misses = 0;\n    this.stats.evictions = 0;\n    this.updateStats();\n  }\n  invalidate(id) {\n    this.cache.delete(id);\n    const index = this.accessOrder.indexOf(id);\n    if (index > -1) {\n      this.accessOrder.splice(index, 1);\n    }\n    this.updateStats();\n  }\n}\nconst FilePreviewCache = ({\n  config,\n  onCacheUpdate,\n  onPreviewGenerated,\n  onError\n}) => {\n  _s();\n  const [cacheManager] = useState(() => new FilePreviewCacheManager(config));\n  const [stats, setStats] = useState(cacheManager.getStats());\n  const updateStats = useCallback(() => {\n    const newStats = cacheManager.getStats();\n    setStats(newStats);\n    onCacheUpdate === null || onCacheUpdate === void 0 ? void 0 : onCacheUpdate(newStats);\n  }, [cacheManager, onCacheUpdate]);\n  useEffect(() => {\n    const interval = setInterval(updateStats, 5000);\n    return () => clearInterval(interval);\n  }, [updateStats]);\n  const generatePreview = useCallback(async file => {\n    try {\n      const preview = await cacheManager.generatePreview(file);\n      onPreviewGenerated === null || onPreviewGenerated === void 0 ? void 0 : onPreviewGenerated(preview);\n      updateStats();\n      return preview;\n    } catch (error) {\n      onError === null || onError === void 0 ? void 0 : onError(error, file.name);\n      throw error;\n    }\n  }, [cacheManager, onPreviewGenerated, onError, updateStats]);\n  const clearCache = useCallback(() => {\n    cacheManager.clear();\n    updateStats();\n  }, [cacheManager, updateStats]);\n  const invalidateFile = useCallback(fileId => {\n    cacheManager.invalidate(fileId);\n    updateStats();\n  }, [cacheManager, updateStats]);\n\n  // Export cache methods for external use\n  const cacheApi = useMemo(() => ({\n    generatePreview,\n    clearCache,\n    invalidateFile,\n    getStats: () => stats\n  }), [generatePreview, clearCache, invalidateFile, stats]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"file-preview-cache\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cache-stats\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Cache Statistics\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 527,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"stats-grid\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Items:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 530,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: stats.totalItems\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 531,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 529,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Memory:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 534,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [(stats.memoryUsage / (1024 * 1024)).toFixed(2), \" MB\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 535,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 533,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Hit Rate:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 538,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [stats.hitRate.toFixed(1), \"%\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 539,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 537,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Evictions:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 542,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: stats.evictions\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 543,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 541,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 528,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: clearCache,\n        className: \"clear-cache-btn\",\n        children: \"Clear Cache\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 546,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 526,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 525,\n    columnNumber: 5\n  }, this);\n};\n_s(FilePreviewCache, \"1DRy0YQOMLrWnamHsR4F8A9RfN0=\");\n_c = FilePreviewCache;\nexport { FilePreviewCacheManager };\nexport default FilePreviewCache;\nvar _c;\n$RefreshReg$(_c, \"FilePreviewCache\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useMemo","jsxDEV","_jsxDEV","DEFAULT_CONFIG","maxSize","maxMemory","ttl","enableThumbnails","thumbnailSize","preloadStrategy","compressionLevel","FilePreviewCacheManager","constructor","config","cache","Map","accessOrder","stats","totalItems","memoryUsage","hitRate","missRate","evictions","totalSize","oldestItem","newestItem","hits","misses","startCleanupTimer","generatePreview","file","id","generateId","existing","get","isExpired","updateAccessOrder","preview","createPreview","set","filePath","name","fileName","fileSize","size","fileType","getFileType","type","mimeType","lastModified","content","cached","cacheTime","Date","now","accessCount","lastAccessed","startsWith","generateImagePreview","dimensions","getImageDimensions","thumbnail","generateThumbnail","generateVideoPreview","duration","getVideoDuration","generateVideoThumbnail","generateAudioPreview","getAudioDuration","metadata","getAudioMetadata","isTextFile","generateTextPreview","generatePDFPreview","generatePDFThumbnail","generateGenericPreview","error","console","Promise","resolve","reject","reader","FileReader","onload","result","onerror","readAsDataURL","video","document","createElement","url","URL","createObjectURL","onloadedmetadata","currentTime","Math","min","onseeked","canvas","width","height","videoHeight","videoWidth","ctx","getContext","drawImage","revokeObjectURL","toDataURL","src","fillStyle","i","random","fillRect","text","substring","length","readAsText","formatFileSize","resizeImage","img","Image","ratio","audio","toISOString","split","textTypes","includes","bytes","units","unitIndex","toFixed","item","evictLRU","estimatedSize","estimateSize","evictByMemory","updateStats","index","indexOf","splice","push","lruId","shift","delete","requiredSize","ArrayBuffer","byteLength","JSON","stringify","totalMemory","oldest","newest","values","max","setInterval","entries","getStats","clear","invalidate","FilePreviewCache","onCacheUpdate","onPreviewGenerated","onError","_s","cacheManager","setStats","newStats","interval","clearInterval","clearCache","invalidateFile","fileId","cacheApi","className","children","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/workspaces/codespaces-django/frontend/src/components/FilePreviewCache/FilePreviewCache.tsx"],"sourcesContent":["import React, { useState, useEffect, useCallback, useMemo } from 'react';\nimport './FilePreviewCache.css';\n\nexport interface PreviewData {\n  id: string;\n  filePath: string;\n  fileName: string;\n  fileSize: number;\n  fileType: string;\n  mimeType: string;\n  lastModified: number;\n  content: string | ArrayBuffer | null;\n  thumbnail?: string;\n  metadata?: Record<string, any>;\n  dimensions?: { width: number; height: number };\n  duration?: number;\n  cached: boolean;\n  cacheTime: number;\n  accessCount: number;\n  lastAccessed: number;\n}\n\nexport interface CacheConfig {\n  maxSize: number; // Maximum number of cached items\n  maxMemory: number; // Maximum memory usage in MB\n  ttl: number; // Time to live in milliseconds\n  enableThumbnails: boolean;\n  thumbnailSize: number;\n  preloadStrategy: 'none' | 'adjacent' | 'intelligent';\n  compressionLevel: number;\n}\n\nexport interface FilePreviewCacheProps {\n  config?: Partial<CacheConfig>;\n  onCacheUpdate?: (stats: CacheStats) => void;\n  onPreviewGenerated?: (preview: PreviewData) => void;\n  onError?: (error: Error, filePath: string) => void;\n}\n\nexport interface CacheStats {\n  totalItems: number;\n  memoryUsage: number;\n  hitRate: number;\n  missRate: number;\n  evictions: number;\n  totalSize: number;\n  oldestItem: number;\n  newestItem: number;\n}\n\nconst DEFAULT_CONFIG: CacheConfig = {\n  maxSize: 100,\n  maxMemory: 50, // 50MB\n  ttl: 30 * 60 * 1000, // 30 minutes\n  enableThumbnails: true,\n  thumbnailSize: 200,\n  preloadStrategy: 'intelligent',\n  compressionLevel: 0.8,\n};\n\nclass FilePreviewCacheManager {\n  private cache: Map<string, PreviewData> = new Map();\n  private accessOrder: string[] = [];\n  private config: CacheConfig;\n  private stats: CacheStats = {\n    totalItems: 0,\n    memoryUsage: 0,\n    hitRate: 0,\n    missRate: 0,\n    evictions: 0,\n    totalSize: 0,\n    oldestItem: 0,\n    newestItem: 0,\n  };\n  private hits = 0;\n  private misses = 0;\n\n  constructor(config: Partial<CacheConfig> = {}) {\n    this.config = { ...DEFAULT_CONFIG, ...config };\n    this.startCleanupTimer();\n  }\n\n  async generatePreview(file: File): Promise<PreviewData> {\n    const id = this.generateId(file);\n    const existing = this.get(id);\n    \n    if (existing && !this.isExpired(existing)) {\n      this.hits++;\n      this.updateAccessOrder(id);\n      return existing;\n    }\n\n    this.misses++;\n    const preview = await this.createPreview(file);\n    this.set(id, preview);\n    \n    return preview;\n  }\n\n  private async createPreview(file: File): Promise<PreviewData> {\n    const preview: PreviewData = {\n      id: this.generateId(file),\n      filePath: file.name,\n      fileName: file.name,\n      fileSize: file.size,\n      fileType: this.getFileType(file.type),\n      mimeType: file.type,\n      lastModified: file.lastModified,\n      content: null,\n      cached: false,\n      cacheTime: Date.now(),\n      accessCount: 1,\n      lastAccessed: Date.now(),\n    };\n\n    try {\n      // Generate content based on file type\n      if (file.type.startsWith('image/')) {\n        preview.content = await this.generateImagePreview(file);\n        preview.dimensions = await this.getImageDimensions(file);\n        if (this.config.enableThumbnails) {\n          preview.thumbnail = await this.generateThumbnail(file);\n        }\n      } else if (file.type.startsWith('video/')) {\n        preview.content = await this.generateVideoPreview(file);\n        preview.duration = await this.getVideoDuration(file);\n        if (this.config.enableThumbnails) {\n          preview.thumbnail = await this.generateVideoThumbnail(file);\n        }\n      } else if (file.type.startsWith('audio/')) {\n        preview.content = await this.generateAudioPreview(file);\n        preview.duration = await this.getAudioDuration(file);\n        preview.metadata = await this.getAudioMetadata(file);\n      } else if (file.type.startsWith('text/') || this.isTextFile(file.type)) {\n        preview.content = await this.generateTextPreview(file);\n      } else if (file.type === 'application/pdf') {\n        preview.content = await this.generatePDFPreview(file);\n        if (this.config.enableThumbnails) {\n          preview.thumbnail = await this.generatePDFThumbnail(file);\n        }\n      } else {\n        preview.content = await this.generateGenericPreview(file);\n      }\n\n      preview.cached = true;\n    } catch (error) {\n      console.error('Failed to generate preview:', error);\n      preview.content = null;\n    }\n\n    return preview;\n  }\n\n  private async generateImagePreview(file: File): Promise<string> {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onload = () => resolve(reader.result as string);\n      reader.onerror = reject;\n      reader.readAsDataURL(file);\n    });\n  }\n\n  private async generateVideoPreview(file: File): Promise<string> {\n    return new Promise((resolve, reject) => {\n      const video = document.createElement('video');\n      const url = URL.createObjectURL(file);\n      \n      video.onloadedmetadata = () => {\n        video.currentTime = Math.min(video.duration / 2, 10); // Seek to middle or 10s\n      };\n      \n      video.onseeked = () => {\n        const canvas = document.createElement('canvas');\n        canvas.width = this.config.thumbnailSize;\n        canvas.height = (canvas.width * video.videoHeight) / video.videoWidth;\n        \n        const ctx = canvas.getContext('2d');\n        ctx?.drawImage(video, 0, 0, canvas.width, canvas.height);\n        \n        URL.revokeObjectURL(url);\n        resolve(canvas.toDataURL('image/jpeg', this.config.compressionLevel));\n      };\n      \n      video.onerror = reject;\n      video.src = url;\n    });\n  }\n\n  private async generateAudioPreview(file: File): Promise<string> {\n    // Generate waveform or audio visualization\n    return new Promise((resolve) => {\n      const canvas = document.createElement('canvas');\n      canvas.width = 300;\n      canvas.height = 100;\n      const ctx = canvas.getContext('2d');\n      \n      if (ctx) {\n        // Generate a simple waveform visualization\n        ctx.fillStyle = '#3b82f6';\n        for (let i = 0; i < canvas.width; i += 4) {\n          const height = Math.random() * canvas.height;\n          ctx.fillRect(i, (canvas.height - height) / 2, 2, height);\n        }\n      }\n      \n      resolve(canvas.toDataURL());\n    });\n  }\n\n  private async generateTextPreview(file: File): Promise<string> {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onload = () => {\n        const text = reader.result as string;\n        // Get first 500 characters for preview\n        resolve(text.substring(0, 500) + (text.length > 500 ? '...' : ''));\n      };\n      reader.onerror = reject;\n      reader.readAsText(file);\n    });\n  }\n\n  private async generatePDFPreview(file: File): Promise<string> {\n    // For PDF preview, you would typically use PDF.js\n    // This is a simplified implementation\n    return URL.createObjectURL(file);\n  }\n\n  private async generateGenericPreview(file: File): Promise<string> {\n    return `File: ${file.name}\\nSize: ${this.formatFileSize(file.size)}\\nType: ${file.type}`;\n  }\n\n  private async generateThumbnail(file: File): Promise<string> {\n    if (file.type.startsWith('image/')) {\n      return this.resizeImage(file, this.config.thumbnailSize);\n    }\n    return '';\n  }\n\n  private async generateVideoThumbnail(file: File): Promise<string> {\n    return this.generateVideoPreview(file);\n  }\n\n  private async generatePDFThumbnail(file: File): Promise<string> {\n    // PDF thumbnail generation would require PDF.js\n    return '';\n  }\n\n  private async resizeImage(file: File, maxSize: number): Promise<string> {\n    return new Promise((resolve, reject) => {\n      const img = new Image();\n      const canvas = document.createElement('canvas');\n      const ctx = canvas.getContext('2d');\n      \n      img.onload = () => {\n        const ratio = Math.min(maxSize / img.width, maxSize / img.height);\n        canvas.width = img.width * ratio;\n        canvas.height = img.height * ratio;\n        \n        ctx?.drawImage(img, 0, 0, canvas.width, canvas.height);\n        resolve(canvas.toDataURL('image/jpeg', this.config.compressionLevel));\n      };\n      \n      img.onerror = reject;\n      img.src = URL.createObjectURL(file);\n    });\n  }\n\n  private async getImageDimensions(file: File): Promise<{ width: number; height: number }> {\n    return new Promise((resolve, reject) => {\n      const img = new Image();\n      img.onload = () => resolve({ width: img.width, height: img.height });\n      img.onerror = reject;\n      img.src = URL.createObjectURL(file);\n    });\n  }\n\n  private async getVideoDuration(file: File): Promise<number> {\n    return new Promise((resolve, reject) => {\n      const video = document.createElement('video');\n      video.onloadedmetadata = () => resolve(video.duration);\n      video.onerror = reject;\n      video.src = URL.createObjectURL(file);\n    });\n  }\n\n  private async getAudioDuration(file: File): Promise<number> {\n    return new Promise((resolve, reject) => {\n      const audio = document.createElement('audio');\n      audio.onloadedmetadata = () => resolve(audio.duration);\n      audio.onerror = reject;\n      audio.src = URL.createObjectURL(file);\n    });\n  }\n\n  private async getAudioMetadata(file: File): Promise<Record<string, any>> {\n    // Basic metadata extraction\n    return {\n      name: file.name,\n      size: file.size,\n      type: file.type,\n      lastModified: new Date(file.lastModified).toISOString(),\n    };\n  }\n\n  private generateId(file: File): string {\n    return `${file.name}_${file.size}_${file.lastModified}`;\n  }\n\n  private getFileType(mimeType: string): string {\n    const [type] = mimeType.split('/');\n    return type || 'unknown';\n  }\n\n  private isTextFile(mimeType: string): boolean {\n    const textTypes = [\n      'application/json',\n      'application/javascript',\n      'application/xml',\n      'application/x-yaml',\n    ];\n    return textTypes.includes(mimeType);\n  }\n\n  private formatFileSize(bytes: number): string {\n    const units = ['B', 'KB', 'MB', 'GB'];\n    let size = bytes;\n    let unitIndex = 0;\n    \n    while (size >= 1024 && unitIndex < units.length - 1) {\n      size /= 1024;\n      unitIndex++;\n    }\n    \n    return `${size.toFixed(1)} ${units[unitIndex]}`;\n  }\n\n  private get(id: string): PreviewData | undefined {\n    const item = this.cache.get(id);\n    if (item) {\n      item.accessCount++;\n      item.lastAccessed = Date.now();\n      this.updateAccessOrder(id);\n    }\n    return item;\n  }\n\n  private set(id: string, preview: PreviewData): void {\n    // Check if we need to evict items\n    if (this.cache.size >= this.config.maxSize) {\n      this.evictLRU();\n    }\n\n    // Check memory usage\n    const estimatedSize = this.estimateSize(preview);\n    if (this.stats.memoryUsage + estimatedSize > this.config.maxMemory * 1024 * 1024) {\n      this.evictByMemory(estimatedSize);\n    }\n\n    this.cache.set(id, preview);\n    this.updateAccessOrder(id);\n    this.updateStats();\n  }\n\n  private updateAccessOrder(id: string): void {\n    const index = this.accessOrder.indexOf(id);\n    if (index > -1) {\n      this.accessOrder.splice(index, 1);\n    }\n    this.accessOrder.push(id);\n  }\n\n  private evictLRU(): void {\n    if (this.accessOrder.length > 0) {\n      const lruId = this.accessOrder.shift()!;\n      this.cache.delete(lruId);\n      this.stats.evictions++;\n    }\n  }\n\n  private evictByMemory(requiredSize: number): void {\n    while (this.stats.memoryUsage + requiredSize > this.config.maxMemory * 1024 * 1024 && this.cache.size > 0) {\n      this.evictLRU();\n      this.updateStats();\n    }\n  }\n\n  private estimateSize(preview: PreviewData): number {\n    let size = 0;\n    \n    // Estimate content size\n    if (typeof preview.content === 'string') {\n      size += preview.content.length * 2; // UTF-16 encoding\n    } else if (preview.content instanceof ArrayBuffer) {\n      size += preview.content.byteLength;\n    }\n    \n    // Estimate thumbnail size\n    if (preview.thumbnail) {\n      size += preview.thumbnail.length * 2;\n    }\n    \n    // Add metadata overhead\n    size += JSON.stringify(preview).length * 2;\n    \n    return size;\n  }\n\n  private isExpired(preview: PreviewData): boolean {\n    return Date.now() - preview.cacheTime > this.config.ttl;\n  }\n\n  private updateStats(): void {\n    this.stats.totalItems = this.cache.size;\n    this.stats.hitRate = this.hits / (this.hits + this.misses) * 100;\n    this.stats.missRate = this.misses / (this.hits + this.misses) * 100;\n    \n    let totalMemory = 0;\n    let oldest = Date.now();\n    let newest = 0;\n    \n    for (const preview of this.cache.values()) {\n      totalMemory += this.estimateSize(preview);\n      oldest = Math.min(oldest, preview.cacheTime);\n      newest = Math.max(newest, preview.cacheTime);\n    }\n    \n    this.stats.memoryUsage = totalMemory;\n    this.stats.totalSize = totalMemory;\n    this.stats.oldestItem = oldest;\n    this.stats.newestItem = newest;\n  }\n\n  private startCleanupTimer(): void {\n    setInterval(() => {\n      const now = Date.now();\n      for (const [id, preview] of this.cache.entries()) {\n        if (this.isExpired(preview)) {\n          this.cache.delete(id);\n          const index = this.accessOrder.indexOf(id);\n          if (index > -1) {\n            this.accessOrder.splice(index, 1);\n          }\n        }\n      }\n      this.updateStats();\n    }, 60000); // Clean up every minute\n  }\n\n  getStats(): CacheStats {\n    this.updateStats();\n    return { ...this.stats };\n  }\n\n  clear(): void {\n    this.cache.clear();\n    this.accessOrder = [];\n    this.hits = 0;\n    this.misses = 0;\n    this.stats.evictions = 0;\n    this.updateStats();\n  }\n\n  invalidate(id: string): void {\n    this.cache.delete(id);\n    const index = this.accessOrder.indexOf(id);\n    if (index > -1) {\n      this.accessOrder.splice(index, 1);\n    }\n    this.updateStats();\n  }\n}\n\nconst FilePreviewCache: React.FC<FilePreviewCacheProps> = ({\n  config,\n  onCacheUpdate,\n  onPreviewGenerated,\n  onError,\n}) => {\n  const [cacheManager] = useState(() => new FilePreviewCacheManager(config));\n  const [stats, setStats] = useState<CacheStats>(cacheManager.getStats());\n\n  const updateStats = useCallback(() => {\n    const newStats = cacheManager.getStats();\n    setStats(newStats);\n    onCacheUpdate?.(newStats);\n  }, [cacheManager, onCacheUpdate]);\n\n  useEffect(() => {\n    const interval = setInterval(updateStats, 5000);\n    return () => clearInterval(interval);\n  }, [updateStats]);\n\n  const generatePreview = useCallback(async (file: File): Promise<PreviewData> => {\n    try {\n      const preview = await cacheManager.generatePreview(file);\n      onPreviewGenerated?.(preview);\n      updateStats();\n      return preview;\n    } catch (error) {\n      onError?.(error as Error, file.name);\n      throw error;\n    }\n  }, [cacheManager, onPreviewGenerated, onError, updateStats]);\n\n  const clearCache = useCallback(() => {\n    cacheManager.clear();\n    updateStats();\n  }, [cacheManager, updateStats]);\n\n  const invalidateFile = useCallback((fileId: string) => {\n    cacheManager.invalidate(fileId);\n    updateStats();\n  }, [cacheManager, updateStats]);\n\n  // Export cache methods for external use\n  const cacheApi = useMemo(() => ({\n    generatePreview,\n    clearCache,\n    invalidateFile,\n    getStats: () => stats,\n  }), [generatePreview, clearCache, invalidateFile, stats]);\n\n  return (\n    <div className=\"file-preview-cache\">\n      <div className=\"cache-stats\">\n        <h3>Cache Statistics</h3>\n        <div className=\"stats-grid\">\n          <div className=\"stat-item\">\n            <label>Items:</label>\n            <span>{stats.totalItems}</span>\n          </div>\n          <div className=\"stat-item\">\n            <label>Memory:</label>\n            <span>{(stats.memoryUsage / (1024 * 1024)).toFixed(2)} MB</span>\n          </div>\n          <div className=\"stat-item\">\n            <label>Hit Rate:</label>\n            <span>{stats.hitRate.toFixed(1)}%</span>\n          </div>\n          <div className=\"stat-item\">\n            <label>Evictions:</label>\n            <span>{stats.evictions}</span>\n          </div>\n        </div>\n        <button onClick={clearCache} className=\"clear-cache-btn\">\n          Clear Cache\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport { FilePreviewCacheManager };\nexport default FilePreviewCache;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}