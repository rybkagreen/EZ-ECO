{"ast":null,"code":"var _jsxFileName = \"/workspaces/codespaces-django/frontend/src/components/ExportUtilities/ExportUtilities.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useCallback, useMemo } from 'react';\nimport './ExportUtilities.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DEFAULT_SETTINGS = {\n  format: 'json',\n  includeContent: false,\n  includeMetadata: true,\n  includePermissions: false,\n  compressionLevel: 6,\n  encryptionEnabled: false,\n  includeChecksums: false\n};\nconst ExportUtilities = ({\n  files = [],\n  onExportStart,\n  onExportComplete,\n  onExportError,\n  onProgress,\n  maxFileSize = 100,\n  allowedFormats = ['json', 'csv', 'xml', 'zip', 'tar', 'yaml']\n}) => {\n  _s();\n  const [settings, setSettings] = useState(DEFAULT_SETTINGS);\n  const [isExporting, setIsExporting] = useState(false);\n  const [progress, setProgress] = useState(0);\n  const [showAdvanced, setShowAdvanced] = useState(false);\n  const [estimatedSize, setEstimatedSize] = useState(0);\n\n  // Calculate estimated export size\n  const calculateEstimatedSize = useCallback(() => {\n    let size = 0;\n    files.forEach(file => {\n      size += file.size;\n      if (settings.includeMetadata) {\n        size += JSON.stringify({\n          path: file.path,\n          name: file.name,\n          size: file.size,\n          type: file.type,\n          lastModified: file.lastModified,\n          permissions: file.permissions,\n          owner: file.owner\n        }).length * 2; // UTF-16 encoding\n      }\n      if (settings.includeChecksums) {\n        size += 64; // SHA-256 hash\n      }\n    });\n\n    // Apply compression estimate\n    if (settings.format === 'zip' || settings.format === 'tar') {\n      size *= 1 - settings.compressionLevel / 10;\n    }\n    setEstimatedSize(size);\n  }, [files, settings]);\n\n  // Update estimated size when settings change\n  React.useEffect(() => {\n    calculateEstimatedSize();\n  }, [calculateEstimatedSize]);\n\n  // Generate checksum\n  const generateChecksum = useCallback(async content => {\n    const encoder = new TextEncoder();\n    const data = typeof content === 'string' ? encoder.encode(content) : new Uint8Array(content);\n    const hashBuffer = await crypto.subtle.digest('SHA-256', data);\n    const hashArray = Array.from(new Uint8Array(hashBuffer));\n    return hashArray.map(b => b.toString(16).padStart(2, '0')).join('');\n  }, []);\n\n  // Encrypt data\n  const encryptData = useCallback(async (data, password) => {\n    const encoder = new TextEncoder();\n    const keyMaterial = await crypto.subtle.importKey('raw', encoder.encode(password), {\n      name: 'PBKDF2'\n    }, false, ['deriveBits', 'deriveKey']);\n    const salt = crypto.getRandomValues(new Uint8Array(16));\n    const key = await crypto.subtle.deriveKey({\n      name: 'PBKDF2',\n      salt,\n      iterations: 100000,\n      hash: 'SHA-256'\n    }, keyMaterial, {\n      name: 'AES-GCM',\n      length: 256\n    }, false, ['encrypt']);\n    const iv = crypto.getRandomValues(new Uint8Array(12));\n    const encryptedData = await crypto.subtle.encrypt({\n      name: 'AES-GCM',\n      iv\n    }, key, encoder.encode(data));\n\n    // Combine salt, iv, and encrypted data\n    const combined = new Uint8Array(salt.length + iv.length + encryptedData.byteLength);\n    combined.set(salt, 0);\n    combined.set(iv, salt.length);\n    combined.set(new Uint8Array(encryptedData), salt.length + iv.length);\n    return btoa(String.fromCharCode(...combined));\n  }, []);\n\n  // Export to JSON\n  const exportToJSON = useCallback(async data => {\n    const processedData = {\n      ...data\n    };\n    if (settings.includeChecksums) {\n      for (const file of processedData.files) {\n        if (file.content) {\n          file.checksum = await generateChecksum(file.content);\n        }\n      }\n    }\n    let jsonString = JSON.stringify(processedData, null, 2);\n    if (settings.encryptionEnabled && settings.password) {\n      jsonString = await encryptData(jsonString, settings.password);\n    }\n    return jsonString;\n  }, [settings, generateChecksum, encryptData]);\n\n  // Export to CSV\n  const exportToCSV = useCallback(async data => {\n    const headers = ['Path', 'Name', 'Size', 'Type', 'Last Modified'];\n    if (settings.includePermissions) headers.push('Permissions', 'Owner');\n    if (settings.includeChecksums) headers.push('Checksum');\n    let csv = headers.join(',') + '\\n';\n    for (const file of data.files) {\n      const row = [`\"${file.path}\"`, `\"${file.name}\"`, file.size.toString(), `\"${file.type}\"`, new Date(file.lastModified).toISOString()];\n      if (settings.includePermissions) {\n        row.push(`\"${file.permissions || ''}\"`, `\"${file.owner || ''}\"`);\n      }\n      if (settings.includeChecksums && file.content) {\n        const checksum = await generateChecksum(file.content);\n        row.push(`\"${checksum}\"`);\n      }\n      csv += row.join(',') + '\\n';\n    }\n    return csv;\n  }, [settings, generateChecksum]);\n\n  // Export to XML\n  const exportToXML = useCallback(async data => {\n    let xml = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n';\n    xml += '<export>\\n';\n    xml += '  <metadata>\\n';\n    Object.entries(data.metadata).forEach(([key, value]) => {\n      xml += `    <${key}>${value}</${key}>\\n`;\n    });\n    xml += '  </metadata>\\n';\n    xml += '  <files>\\n';\n    for (const file of data.files) {\n      xml += '    <file>\\n';\n      xml += `      <path><![CDATA[${file.path}]]></path>\\n`;\n      xml += `      <name><![CDATA[${file.name}]]></name>\\n`;\n      xml += `      <size>${file.size}</size>\\n`;\n      xml += `      <type><![CDATA[${file.type}]]></type>\\n`;\n      xml += `      <lastModified>${new Date(file.lastModified).toISOString()}</lastModified>\\n`;\n      if (settings.includePermissions) {\n        xml += `      <permissions><![CDATA[${file.permissions || ''}]]></permissions>\\n`;\n        xml += `      <owner><![CDATA[${file.owner || ''}]]></owner>\\n`;\n      }\n      if (settings.includeContent && file.content) {\n        const content = typeof file.content === 'string' ? file.content : btoa(String.fromCharCode(...new Uint8Array(file.content)));\n        xml += `      <content><![CDATA[${content}]]></content>\\n`;\n      }\n      if (settings.includeChecksums && file.content) {\n        const checksum = await generateChecksum(file.content);\n        xml += `      <checksum>${checksum}</checksum>\\n`;\n      }\n      xml += '    </file>\\n';\n    }\n    xml += '  </files>\\n';\n    xml += '</export>\\n';\n    return xml;\n  }, [settings, generateChecksum]);\n\n  // Export to YAML\n  const exportToYAML = useCallback(async data => {\n    let yaml = 'export:\\n';\n    yaml += '  metadata:\\n';\n    Object.entries(data.metadata).forEach(([key, value]) => {\n      yaml += `    ${key}: ${typeof value === 'string' ? `\"${value}\"` : value}\\n`;\n    });\n    yaml += '  files:\\n';\n    for (const file of data.files) {\n      yaml += '    - path: \"' + file.path.replace(/\"/g, '\\\\\"') + '\"\\n';\n      yaml += '      name: \"' + file.name.replace(/\"/g, '\\\\\"') + '\"\\n';\n      yaml += '      size: ' + file.size + '\\n';\n      yaml += '      type: \"' + file.type + '\"\\n';\n      yaml += '      lastModified: \"' + new Date(file.lastModified).toISOString() + '\"\\n';\n      if (settings.includePermissions) {\n        yaml += '      permissions: \"' + (file.permissions || '') + '\"\\n';\n        yaml += '      owner: \"' + (file.owner || '') + '\"\\n';\n      }\n      if (settings.includeChecksums && file.content) {\n        const checksum = await generateChecksum(file.content);\n        yaml += '      checksum: \"' + checksum + '\"\\n';\n      }\n    }\n    return yaml;\n  }, [settings, generateChecksum]);\n\n  // Create ZIP file\n  const createZipFile = useCallback(async data => {\n    // This would require a ZIP library like JSZip\n    // For now, return JSON as blob\n    const jsonData = await exportToJSON(data);\n    return new Blob([jsonData], {\n      type: 'application/json'\n    });\n  }, [exportToJSON]);\n\n  // Main export function\n  const performExport = useCallback(async () => {\n    if (files.length === 0) {\n      onExportError === null || onExportError === void 0 ? void 0 : onExportError(new Error('No files to export'));\n      return;\n    }\n    setIsExporting(true);\n    setProgress(0);\n    onExportStart === null || onExportStart === void 0 ? void 0 : onExportStart(settings.format);\n    try {\n      // Prepare export data\n      const exportData = {\n        files: files.map(file => ({\n          ...file,\n          content: settings.includeContent ? file.content : undefined\n        })),\n        metadata: {\n          exportDate: new Date().toISOString(),\n          exportVersion: '1.0.0',\n          totalFiles: files.length,\n          totalSize: files.reduce((sum, file) => sum + file.size, 0),\n          source: 'Terminal File Manager',\n          includeHidden: true,\n          includeSystem: false,\n          compressionLevel: settings.compressionLevel\n        },\n        settings\n      };\n      let exportContent;\n      let mimeType;\n      let filename;\n\n      // Update progress\n      setProgress(25);\n      onProgress === null || onProgress === void 0 ? void 0 : onProgress(25);\n\n      // Generate export based on format\n      switch (settings.format) {\n        case 'json':\n          exportContent = await exportToJSON(exportData);\n          mimeType = 'application/json';\n          filename = 'file-manager-export.json';\n          break;\n        case 'csv':\n          exportContent = await exportToCSV(exportData);\n          mimeType = 'text/csv';\n          filename = 'file-manager-export.csv';\n          break;\n        case 'xml':\n          exportContent = await exportToXML(exportData);\n          mimeType = 'application/xml';\n          filename = 'file-manager-export.xml';\n          break;\n        case 'yaml':\n          exportContent = await exportToYAML(exportData);\n          mimeType = 'application/x-yaml';\n          filename = 'file-manager-export.yaml';\n          break;\n        case 'zip':\n          exportContent = await createZipFile(exportData);\n          mimeType = 'application/zip';\n          filename = 'file-manager-export.zip';\n          break;\n        default:\n          throw new Error(`Unsupported format: ${settings.format}`);\n      }\n      setProgress(75);\n      onProgress === null || onProgress === void 0 ? void 0 : onProgress(75);\n\n      // Create download blob\n      const blob = typeof exportContent === 'string' ? new Blob([exportContent], {\n        type: mimeType\n      }) : exportContent;\n\n      // Create download URL\n      const downloadUrl = URL.createObjectURL(blob);\n      setProgress(100);\n      onProgress === null || onProgress === void 0 ? void 0 : onProgress(100);\n\n      // Trigger download\n      const link = document.createElement('a');\n      link.href = downloadUrl;\n      link.download = filename;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      onExportComplete === null || onExportComplete === void 0 ? void 0 : onExportComplete(exportData, downloadUrl);\n\n      // Cleanup\n      setTimeout(() => {\n        URL.revokeObjectURL(downloadUrl);\n      }, 5000);\n    } catch (error) {\n      onExportError === null || onExportError === void 0 ? void 0 : onExportError(error);\n    } finally {\n      setIsExporting(false);\n      setProgress(0);\n    }\n  }, [files, settings, onExportStart, onExportComplete, onExportError, onProgress, exportToJSON, exportToCSV, exportToXML, exportToYAML, createZipFile]);\n\n  // Format options\n  const formatOptions = useMemo(() => [{\n    value: 'json',\n    label: 'JSON',\n    description: 'JavaScript Object Notation'\n  }, {\n    value: 'csv',\n    label: 'CSV',\n    description: 'Comma Separated Values'\n  }, {\n    value: 'xml',\n    label: 'XML',\n    description: 'eXtensible Markup Language'\n  }, {\n    value: 'yaml',\n    label: 'YAML',\n    description: 'YAML Ain\\'t Markup Language'\n  }, {\n    value: 'zip',\n    label: 'ZIP',\n    description: 'Compressed Archive'\n  }, {\n    value: 'tar',\n    label: 'TAR',\n    description: 'Tape Archive'\n  }].filter(option => allowedFormats.includes(option.value)), [allowedFormats]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"export-utilities\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"export-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Export File Manager Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 428,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"file-summary\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: [files.length, \" files\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 430,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [(files.reduce((sum, file) => sum + file.size, 0) / (1024 * 1024)).toFixed(2), \" MB\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 431,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 429,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 427,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"export-settings\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"setting-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"format-select\",\n          children: \"Export Format\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 437,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"format-select\",\n          value: settings.format,\n          onChange: e => setSettings(prev => ({\n            ...prev,\n            format: e.target.value\n          })),\n          disabled: isExporting,\n          children: formatOptions.map(option => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: option.value,\n            children: [option.label, \" - \", option.description]\n          }, option.value, true, {\n            fileName: _jsxFileName,\n            lineNumber: 445,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 438,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 436,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"setting-group\",\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"checkbox-label\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: settings.includeContent,\n            onChange: e => setSettings(prev => ({\n              ...prev,\n              includeContent: e.target.checked\n            })),\n            disabled: isExporting\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 454,\n            columnNumber: 13\n          }, this), \"Include file content\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 453,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 452,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"setting-group\",\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"checkbox-label\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: settings.includeMetadata,\n            onChange: e => setSettings(prev => ({\n              ...prev,\n              includeMetadata: e.target.checked\n            })),\n            disabled: isExporting\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 466,\n            columnNumber: 13\n          }, this), \"Include metadata\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 465,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 464,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"advanced-toggle\",\n        onClick: () => setShowAdvanced(!showAdvanced),\n        disabled: isExporting,\n        children: [showAdvanced ? 'Hide' : 'Show', \" Advanced Options\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 476,\n        columnNumber: 9\n      }, this), showAdvanced && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"advanced-settings\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"setting-group\",\n          children: /*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"checkbox-label\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              checked: settings.includePermissions,\n              onChange: e => setSettings(prev => ({\n                ...prev,\n                includePermissions: e.target.checked\n              })),\n              disabled: isExporting\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 488,\n              columnNumber: 17\n            }, this), \"Include file permissions\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 487,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 486,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"setting-group\",\n          children: /*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"checkbox-label\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              checked: settings.includeChecksums,\n              onChange: e => setSettings(prev => ({\n                ...prev,\n                includeChecksums: e.target.checked\n              })),\n              disabled: isExporting\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 500,\n              columnNumber: 17\n            }, this), \"Generate checksums\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 499,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 498,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"setting-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"compression-level\",\n            children: \"Compression Level (0-9)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 511,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"compression-level\",\n            type: \"range\",\n            min: \"0\",\n            max: \"9\",\n            value: settings.compressionLevel,\n            onChange: e => setSettings(prev => ({\n              ...prev,\n              compressionLevel: parseInt(e.target.value)\n            })),\n            disabled: isExporting\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 512,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"range-value\",\n            children: settings.compressionLevel\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 521,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 510,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"setting-group\",\n          children: /*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"checkbox-label\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              checked: settings.encryptionEnabled,\n              onChange: e => setSettings(prev => ({\n                ...prev,\n                encryptionEnabled: e.target.checked\n              })),\n              disabled: isExporting\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 526,\n              columnNumber: 17\n            }, this), \"Enable encryption\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 525,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 524,\n          columnNumber: 13\n        }, this), settings.encryptionEnabled && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"setting-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"password\",\n            children: \"Password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 538,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"password\",\n            type: \"password\",\n            value: settings.password || '',\n            onChange: e => setSettings(prev => ({\n              ...prev,\n              password: e.target.value\n            })),\n            disabled: isExporting,\n            placeholder: \"Enter encryption password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 539,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 537,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 485,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 435,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"export-summary\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"summary-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Estimated size:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 555,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [(estimatedSize / (1024 * 1024)).toFixed(2), \" MB\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 556,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 554,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"summary-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Format:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 559,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: settings.format.toUpperCase()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 560,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 558,\n        columnNumber: 9\n      }, this), settings.encryptionEnabled && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"summary-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Encryption:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 564,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"AES-256-GCM\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 565,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 563,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 553,\n      columnNumber: 7\n    }, this), isExporting && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"export-progress\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress-bar\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"progress-fill\",\n          style: {\n            width: `${progress}%`\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 573,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 572,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress-text\",\n        children: [progress, \"% Complete\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 578,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 571,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"export-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"export-btn\",\n        onClick: performExport,\n        disabled: isExporting || files.length === 0,\n        children: isExporting ? 'Exporting...' : 'Export Data'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 583,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 582,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 426,\n    columnNumber: 5\n  }, this);\n};\n_s(ExportUtilities, \"FdwppleskWihQi13Mymhzldy38U=\");\n_c = ExportUtilities;\nexport default ExportUtilities;\nvar _c;\n$RefreshReg$(_c, \"ExportUtilities\");","map":{"version":3,"names":["React","useState","useCallback","useMemo","jsxDEV","_jsxDEV","DEFAULT_SETTINGS","format","includeContent","includeMetadata","includePermissions","compressionLevel","encryptionEnabled","includeChecksums","ExportUtilities","files","onExportStart","onExportComplete","onExportError","onProgress","maxFileSize","allowedFormats","_s","settings","setSettings","isExporting","setIsExporting","progress","setProgress","showAdvanced","setShowAdvanced","estimatedSize","setEstimatedSize","calculateEstimatedSize","size","forEach","file","JSON","stringify","path","name","type","lastModified","permissions","owner","length","useEffect","generateChecksum","content","encoder","TextEncoder","data","encode","Uint8Array","hashBuffer","crypto","subtle","digest","hashArray","Array","from","map","b","toString","padStart","join","encryptData","password","keyMaterial","importKey","salt","getRandomValues","key","deriveKey","iterations","hash","iv","encryptedData","encrypt","combined","byteLength","set","btoa","String","fromCharCode","exportToJSON","processedData","checksum","jsonString","exportToCSV","headers","push","csv","row","Date","toISOString","exportToXML","xml","Object","entries","metadata","value","exportToYAML","yaml","replace","createZipFile","jsonData","Blob","performExport","Error","exportData","undefined","exportDate","exportVersion","totalFiles","totalSize","reduce","sum","source","includeHidden","includeSystem","exportContent","mimeType","filename","blob","downloadUrl","URL","createObjectURL","link","document","createElement","href","download","body","appendChild","click","removeChild","setTimeout","revokeObjectURL","error","formatOptions","label","description","filter","option","includes","className","children","fileName","_jsxFileName","lineNumber","columnNumber","toFixed","htmlFor","id","onChange","e","prev","target","disabled","checked","onClick","min","max","parseInt","placeholder","toUpperCase","style","width","_c","$RefreshReg$"],"sources":["/workspaces/codespaces-django/frontend/src/components/ExportUtilities/ExportUtilities.tsx"],"sourcesContent":["import React, { useState, useCallback, useMemo } from 'react';\nimport './ExportUtilities.css';\n\nexport interface ExportData {\n  files: FileInfo[];\n  metadata: ExportMetadata;\n  settings: ExportSettings;\n}\n\nexport interface FileInfo {\n  path: string;\n  name: string;\n  size: number;\n  type: string;\n  lastModified: number;\n  content?: string | ArrayBuffer;\n  permissions?: string;\n  owner?: string;\n  checksum?: string;\n}\n\nexport interface ExportMetadata {\n  exportDate: string;\n  exportVersion: string;\n  totalFiles: number;\n  totalSize: number;\n  source: string;\n  includeHidden: boolean;\n  includeSystem: boolean;\n  compressionLevel: number;\n}\n\nexport interface ExportSettings {\n  format: 'json' | 'csv' | 'xml' | 'zip' | 'tar' | 'yaml';\n  includeContent: boolean;\n  includeMetadata: boolean;\n  includePermissions: boolean;\n  compressionLevel: number;\n  encryptionEnabled: boolean;\n  password?: string;\n  splitSize?: number; // MB\n  includeChecksums: boolean;\n}\n\nexport interface ExportUtilitiesProps {\n  files: FileInfo[];\n  onExportStart?: (format: string) => void;\n  onExportComplete?: (data: ExportData, downloadUrl: string) => void;\n  onExportError?: (error: Error) => void;\n  onProgress?: (progress: number) => void;\n  maxFileSize?: number; // MB\n  allowedFormats?: string[];\n}\n\nconst DEFAULT_SETTINGS: ExportSettings = {\n  format: 'json',\n  includeContent: false,\n  includeMetadata: true,\n  includePermissions: false,\n  compressionLevel: 6,\n  encryptionEnabled: false,\n  includeChecksums: false,\n};\n\nconst ExportUtilities: React.FC<ExportUtilitiesProps> = ({\n  files = [],\n  onExportStart,\n  onExportComplete,\n  onExportError,\n  onProgress,\n  maxFileSize = 100,\n  allowedFormats = ['json', 'csv', 'xml', 'zip', 'tar', 'yaml'],\n}) => {\n  const [settings, setSettings] = useState<ExportSettings>(DEFAULT_SETTINGS);\n  const [isExporting, setIsExporting] = useState(false);\n  const [progress, setProgress] = useState(0);\n  const [showAdvanced, setShowAdvanced] = useState(false);\n  const [estimatedSize, setEstimatedSize] = useState(0);\n\n  // Calculate estimated export size\n  const calculateEstimatedSize = useCallback(() => {\n    let size = 0;\n    \n    files.forEach(file => {\n      size += file.size;\n      \n      if (settings.includeMetadata) {\n        size += JSON.stringify({\n          path: file.path,\n          name: file.name,\n          size: file.size,\n          type: file.type,\n          lastModified: file.lastModified,\n          permissions: file.permissions,\n          owner: file.owner,\n        }).length * 2; // UTF-16 encoding\n      }\n      \n      if (settings.includeChecksums) {\n        size += 64; // SHA-256 hash\n      }\n    });\n    \n    // Apply compression estimate\n    if (settings.format === 'zip' || settings.format === 'tar') {\n      size *= (1 - settings.compressionLevel / 10);\n    }\n    \n    setEstimatedSize(size);\n  }, [files, settings]);\n\n  // Update estimated size when settings change\n  React.useEffect(() => {\n    calculateEstimatedSize();\n  }, [calculateEstimatedSize]);\n\n  // Generate checksum\n  const generateChecksum = useCallback(async (content: string | ArrayBuffer): Promise<string> => {\n    const encoder = new TextEncoder();\n    const data = typeof content === 'string' ? encoder.encode(content) : new Uint8Array(content);\n    const hashBuffer = await crypto.subtle.digest('SHA-256', data);\n    const hashArray = Array.from(new Uint8Array(hashBuffer));\n    return hashArray.map(b => b.toString(16).padStart(2, '0')).join('');\n  }, []);\n\n  // Encrypt data\n  const encryptData = useCallback(async (data: string, password: string): Promise<string> => {\n    const encoder = new TextEncoder();\n    const keyMaterial = await crypto.subtle.importKey(\n      'raw',\n      encoder.encode(password),\n      { name: 'PBKDF2' },\n      false,\n      ['deriveBits', 'deriveKey']\n    );\n    \n    const salt = crypto.getRandomValues(new Uint8Array(16));\n    const key = await crypto.subtle.deriveKey(\n      {\n        name: 'PBKDF2',\n        salt,\n        iterations: 100000,\n        hash: 'SHA-256',\n      },\n      keyMaterial,\n      { name: 'AES-GCM', length: 256 },\n      false,\n      ['encrypt']\n    );\n    \n    const iv = crypto.getRandomValues(new Uint8Array(12));\n    const encryptedData = await crypto.subtle.encrypt(\n      { name: 'AES-GCM', iv },\n      key,\n      encoder.encode(data)\n    );\n    \n    // Combine salt, iv, and encrypted data\n    const combined = new Uint8Array(salt.length + iv.length + encryptedData.byteLength);\n    combined.set(salt, 0);\n    combined.set(iv, salt.length);\n    combined.set(new Uint8Array(encryptedData), salt.length + iv.length);\n    \n    return btoa(String.fromCharCode(...combined));\n  }, []);\n\n  // Export to JSON\n  const exportToJSON = useCallback(async (data: ExportData): Promise<string> => {\n    const processedData = { ...data };\n    \n    if (settings.includeChecksums) {\n      for (const file of processedData.files) {\n        if (file.content) {\n          file.checksum = await generateChecksum(file.content);\n        }\n      }\n    }\n    \n    let jsonString = JSON.stringify(processedData, null, 2);\n    \n    if (settings.encryptionEnabled && settings.password) {\n      jsonString = await encryptData(jsonString, settings.password);\n    }\n    \n    return jsonString;\n  }, [settings, generateChecksum, encryptData]);\n\n  // Export to CSV\n  const exportToCSV = useCallback(async (data: ExportData): Promise<string> => {\n    const headers = ['Path', 'Name', 'Size', 'Type', 'Last Modified'];\n    \n    if (settings.includePermissions) headers.push('Permissions', 'Owner');\n    if (settings.includeChecksums) headers.push('Checksum');\n    \n    let csv = headers.join(',') + '\\n';\n    \n    for (const file of data.files) {\n      const row = [\n        `\"${file.path}\"`,\n        `\"${file.name}\"`,\n        file.size.toString(),\n        `\"${file.type}\"`,\n        new Date(file.lastModified).toISOString(),\n      ];\n      \n      if (settings.includePermissions) {\n        row.push(`\"${file.permissions || ''}\"`, `\"${file.owner || ''}\"`);\n      }\n      \n      if (settings.includeChecksums && file.content) {\n        const checksum = await generateChecksum(file.content);\n        row.push(`\"${checksum}\"`);\n      }\n      \n      csv += row.join(',') + '\\n';\n    }\n    \n    return csv;\n  }, [settings, generateChecksum]);\n\n  // Export to XML\n  const exportToXML = useCallback(async (data: ExportData): Promise<string> => {\n    let xml = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n';\n    xml += '<export>\\n';\n    xml += '  <metadata>\\n';\n    \n    Object.entries(data.metadata).forEach(([key, value]) => {\n      xml += `    <${key}>${value}</${key}>\\n`;\n    });\n    \n    xml += '  </metadata>\\n';\n    xml += '  <files>\\n';\n    \n    for (const file of data.files) {\n      xml += '    <file>\\n';\n      xml += `      <path><![CDATA[${file.path}]]></path>\\n`;\n      xml += `      <name><![CDATA[${file.name}]]></name>\\n`;\n      xml += `      <size>${file.size}</size>\\n`;\n      xml += `      <type><![CDATA[${file.type}]]></type>\\n`;\n      xml += `      <lastModified>${new Date(file.lastModified).toISOString()}</lastModified>\\n`;\n      \n      if (settings.includePermissions) {\n        xml += `      <permissions><![CDATA[${file.permissions || ''}]]></permissions>\\n`;\n        xml += `      <owner><![CDATA[${file.owner || ''}]]></owner>\\n`;\n      }\n      \n      if (settings.includeContent && file.content) {\n        const content = typeof file.content === 'string' \n          ? file.content \n          : btoa(String.fromCharCode(...new Uint8Array(file.content)));\n        xml += `      <content><![CDATA[${content}]]></content>\\n`;\n      }\n      \n      if (settings.includeChecksums && file.content) {\n        const checksum = await generateChecksum(file.content);\n        xml += `      <checksum>${checksum}</checksum>\\n`;\n      }\n      \n      xml += '    </file>\\n';\n    }\n    \n    xml += '  </files>\\n';\n    xml += '</export>\\n';\n    \n    return xml;\n  }, [settings, generateChecksum]);\n\n  // Export to YAML\n  const exportToYAML = useCallback(async (data: ExportData): Promise<string> => {\n    let yaml = 'export:\\n';\n    yaml += '  metadata:\\n';\n    \n    Object.entries(data.metadata).forEach(([key, value]) => {\n      yaml += `    ${key}: ${typeof value === 'string' ? `\"${value}\"` : value}\\n`;\n    });\n    \n    yaml += '  files:\\n';\n    \n    for (const file of data.files) {\n      yaml += '    - path: \"' + file.path.replace(/\"/g, '\\\\\"') + '\"\\n';\n      yaml += '      name: \"' + file.name.replace(/\"/g, '\\\\\"') + '\"\\n';\n      yaml += '      size: ' + file.size + '\\n';\n      yaml += '      type: \"' + file.type + '\"\\n';\n      yaml += '      lastModified: \"' + new Date(file.lastModified).toISOString() + '\"\\n';\n      \n      if (settings.includePermissions) {\n        yaml += '      permissions: \"' + (file.permissions || '') + '\"\\n';\n        yaml += '      owner: \"' + (file.owner || '') + '\"\\n';\n      }\n      \n      if (settings.includeChecksums && file.content) {\n        const checksum = await generateChecksum(file.content);\n        yaml += '      checksum: \"' + checksum + '\"\\n';\n      }\n    }\n    \n    return yaml;\n  }, [settings, generateChecksum]);\n\n  // Create ZIP file\n  const createZipFile = useCallback(async (data: ExportData): Promise<Blob> => {\n    // This would require a ZIP library like JSZip\n    // For now, return JSON as blob\n    const jsonData = await exportToJSON(data);\n    return new Blob([jsonData], { type: 'application/json' });\n  }, [exportToJSON]);\n\n  // Main export function\n  const performExport = useCallback(async (): Promise<void> => {\n    if (files.length === 0) {\n      onExportError?.(new Error('No files to export'));\n      return;\n    }\n\n    setIsExporting(true);\n    setProgress(0);\n    onExportStart?.(settings.format);\n\n    try {\n      // Prepare export data\n      const exportData: ExportData = {\n        files: files.map(file => ({\n          ...file,\n          content: settings.includeContent ? file.content : undefined,\n        })),\n        metadata: {\n          exportDate: new Date().toISOString(),\n          exportVersion: '1.0.0',\n          totalFiles: files.length,\n          totalSize: files.reduce((sum, file) => sum + file.size, 0),\n          source: 'Terminal File Manager',\n          includeHidden: true,\n          includeSystem: false,\n          compressionLevel: settings.compressionLevel,\n        },\n        settings,\n      };\n\n      let exportContent: string | Blob;\n      let mimeType: string;\n      let filename: string;\n\n      // Update progress\n      setProgress(25);\n      onProgress?.(25);\n\n      // Generate export based on format\n      switch (settings.format) {\n        case 'json':\n          exportContent = await exportToJSON(exportData);\n          mimeType = 'application/json';\n          filename = 'file-manager-export.json';\n          break;\n        case 'csv':\n          exportContent = await exportToCSV(exportData);\n          mimeType = 'text/csv';\n          filename = 'file-manager-export.csv';\n          break;\n        case 'xml':\n          exportContent = await exportToXML(exportData);\n          mimeType = 'application/xml';\n          filename = 'file-manager-export.xml';\n          break;\n        case 'yaml':\n          exportContent = await exportToYAML(exportData);\n          mimeType = 'application/x-yaml';\n          filename = 'file-manager-export.yaml';\n          break;\n        case 'zip':\n          exportContent = await createZipFile(exportData);\n          mimeType = 'application/zip';\n          filename = 'file-manager-export.zip';\n          break;\n        default:\n          throw new Error(`Unsupported format: ${settings.format}`);\n      }\n\n      setProgress(75);\n      onProgress?.(75);\n\n      // Create download blob\n      const blob = typeof exportContent === 'string'\n        ? new Blob([exportContent], { type: mimeType })\n        : exportContent;\n\n      // Create download URL\n      const downloadUrl = URL.createObjectURL(blob);\n\n      setProgress(100);\n      onProgress?.(100);\n\n      // Trigger download\n      const link = document.createElement('a');\n      link.href = downloadUrl;\n      link.download = filename;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n\n      onExportComplete?.(exportData, downloadUrl);\n\n      // Cleanup\n      setTimeout(() => {\n        URL.revokeObjectURL(downloadUrl);\n      }, 5000);\n\n    } catch (error) {\n      onExportError?.(error as Error);\n    } finally {\n      setIsExporting(false);\n      setProgress(0);\n    }\n  }, [files, settings, onExportStart, onExportComplete, onExportError, onProgress, exportToJSON, exportToCSV, exportToXML, exportToYAML, createZipFile]);\n\n  // Format options\n  const formatOptions = useMemo(() => [\n    { value: 'json', label: 'JSON', description: 'JavaScript Object Notation' },\n    { value: 'csv', label: 'CSV', description: 'Comma Separated Values' },\n    { value: 'xml', label: 'XML', description: 'eXtensible Markup Language' },\n    { value: 'yaml', label: 'YAML', description: 'YAML Ain\\'t Markup Language' },\n    { value: 'zip', label: 'ZIP', description: 'Compressed Archive' },\n    { value: 'tar', label: 'TAR', description: 'Tape Archive' },\n  ].filter(option => allowedFormats.includes(option.value)), [allowedFormats]);\n\n  return (\n    <div className=\"export-utilities\">\n      <div className=\"export-header\">\n        <h3>Export File Manager Data</h3>\n        <div className=\"file-summary\">\n          <span>{files.length} files</span>\n          <span>{(files.reduce((sum, file) => sum + file.size, 0) / (1024 * 1024)).toFixed(2)} MB</span>\n        </div>\n      </div>\n\n      <div className=\"export-settings\">\n        <div className=\"setting-group\">\n          <label htmlFor=\"format-select\">Export Format</label>\n          <select\n            id=\"format-select\"\n            value={settings.format}\n            onChange={(e) => setSettings(prev => ({ ...prev, format: e.target.value as any }))}\n            disabled={isExporting}\n          >\n            {formatOptions.map(option => (\n              <option key={option.value} value={option.value}>\n                {option.label} - {option.description}\n              </option>\n            ))}\n          </select>\n        </div>\n\n        <div className=\"setting-group\">\n          <label className=\"checkbox-label\">\n            <input\n              type=\"checkbox\"\n              checked={settings.includeContent}\n              onChange={(e) => setSettings(prev => ({ ...prev, includeContent: e.target.checked }))}\n              disabled={isExporting}\n            />\n            Include file content\n          </label>\n        </div>\n\n        <div className=\"setting-group\">\n          <label className=\"checkbox-label\">\n            <input\n              type=\"checkbox\"\n              checked={settings.includeMetadata}\n              onChange={(e) => setSettings(prev => ({ ...prev, includeMetadata: e.target.checked }))}\n              disabled={isExporting}\n            />\n            Include metadata\n          </label>\n        </div>\n\n        <button\n          className=\"advanced-toggle\"\n          onClick={() => setShowAdvanced(!showAdvanced)}\n          disabled={isExporting}\n        >\n          {showAdvanced ? 'Hide' : 'Show'} Advanced Options\n        </button>\n\n        {showAdvanced && (\n          <div className=\"advanced-settings\">\n            <div className=\"setting-group\">\n              <label className=\"checkbox-label\">\n                <input\n                  type=\"checkbox\"\n                  checked={settings.includePermissions}\n                  onChange={(e) => setSettings(prev => ({ ...prev, includePermissions: e.target.checked }))}\n                  disabled={isExporting}\n                />\n                Include file permissions\n              </label>\n            </div>\n\n            <div className=\"setting-group\">\n              <label className=\"checkbox-label\">\n                <input\n                  type=\"checkbox\"\n                  checked={settings.includeChecksums}\n                  onChange={(e) => setSettings(prev => ({ ...prev, includeChecksums: e.target.checked }))}\n                  disabled={isExporting}\n                />\n                Generate checksums\n              </label>\n            </div>\n\n            <div className=\"setting-group\">\n              <label htmlFor=\"compression-level\">Compression Level (0-9)</label>\n              <input\n                id=\"compression-level\"\n                type=\"range\"\n                min=\"0\"\n                max=\"9\"\n                value={settings.compressionLevel}\n                onChange={(e) => setSettings(prev => ({ ...prev, compressionLevel: parseInt(e.target.value) }))}\n                disabled={isExporting}\n              />\n              <span className=\"range-value\">{settings.compressionLevel}</span>\n            </div>\n\n            <div className=\"setting-group\">\n              <label className=\"checkbox-label\">\n                <input\n                  type=\"checkbox\"\n                  checked={settings.encryptionEnabled}\n                  onChange={(e) => setSettings(prev => ({ ...prev, encryptionEnabled: e.target.checked }))}\n                  disabled={isExporting}\n                />\n                Enable encryption\n              </label>\n            </div>\n\n            {settings.encryptionEnabled && (\n              <div className=\"setting-group\">\n                <label htmlFor=\"password\">Password</label>\n                <input\n                  id=\"password\"\n                  type=\"password\"\n                  value={settings.password || ''}\n                  onChange={(e) => setSettings(prev => ({ ...prev, password: e.target.value }))}\n                  disabled={isExporting}\n                  placeholder=\"Enter encryption password\"\n                />\n              </div>\n            )}\n          </div>\n        )}\n      </div>\n\n      <div className=\"export-summary\">\n        <div className=\"summary-item\">\n          <label>Estimated size:</label>\n          <span>{(estimatedSize / (1024 * 1024)).toFixed(2)} MB</span>\n        </div>\n        <div className=\"summary-item\">\n          <label>Format:</label>\n          <span>{settings.format.toUpperCase()}</span>\n        </div>\n        {settings.encryptionEnabled && (\n          <div className=\"summary-item\">\n            <label>Encryption:</label>\n            <span>AES-256-GCM</span>\n          </div>\n        )}\n      </div>\n\n      {isExporting && (\n        <div className=\"export-progress\">\n          <div className=\"progress-bar\">\n            <div \n              className=\"progress-fill\" \n              style={{ width: `${progress}%` }}\n            />\n          </div>\n          <div className=\"progress-text\">{progress}% Complete</div>\n        </div>\n      )}\n\n      <div className=\"export-actions\">\n        <button\n          className=\"export-btn\"\n          onClick={performExport}\n          disabled={isExporting || files.length === 0}\n        >\n          {isExporting ? 'Exporting...' : 'Export Data'}\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default ExportUtilities;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}